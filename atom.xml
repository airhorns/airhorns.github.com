<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Will You Harry Me]]></title>
  <link href="http://harry.me/atom.xml" rel="self"/>
  <link href="http://harry.me/"/>
  <updated>2015-10-22T00:02:32-04:00</updated>
  <id>http://harry.me/</id>
  <author>
    <name><![CDATA[Harry Brundage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Neat Algorithms - Paxos]]></title>
    <link href="http://harry.me/blog/2014/12/27/neat-algorithms-paxos/"/>
    <updated>2014-12-27T12:42:00-05:00</updated>
    <id>http://harry.me/blog/2014/12/27/neat-algorithms-paxos</id>
    <content type="html"><![CDATA[<p><link rel="stylesheet" href="http://harry.me/assets/paxos-b8344ea2a0bc2491f6b6331d1df9c108.css"></p>

<p>This is an explanation and demonstration of an extraordinarily neat algorithm called Paxos. Paxos is a family of algorithms for teaching a whole bunch of decidedly unreliable processes to reliably decide on stuff. More formally: it allows a group of unreliable processors to deterministically and safely reach consensus if some certain conditions can be met, while ensuring the group remains consistent if the conditions can&rsquo;t be met.</p>

<p>The demo below demonstrates a live version of Paxos implemented in Javascript. Two different clients propose new values to random nodes in the system, and depending on what nodes are contacted and in what order, consensus is reached on one of the two proposed values and the clients informed.</p>

<div id="main_demo"></div>


<h1>Paxos: something we can agree on.</h1>

<p>Paxos is an algorithm to solve the <a href="http://harry.me/blog/2013/07/07/id-like-to-have-an-argument-a-primer-on-consensus/">consensus problem</a>. Honest-to-goodness real-life implementations of Paxos can be found at the heart of world class software like Cassandra, Google&rsquo;s magnificent Spanner database, and also their distributed locking service Chubby. A system governed by Paxos is usually talked about in terms of the value, or state, it tracks. The system is built to allow many processes to store and report this value even if some fail, which is handy for building highly available and strongly consistent systems. To restate, a majority of the members of the system must agree that a particular value is in fact &ldquo;the one true&rdquo; value to then report it as such. Conversely, it means that one rogue process which has an out of date idea of the world can&rsquo;t report something that isn&rsquo;t &ldquo;the one true&rdquo; thing.</p>

<p>Let&rsquo;s get some definitions out of the way for upcoming explanation:</p>

<ul>
<li>A <code>process</code> is one of the computers in the system. Lots of people use the word replica or node for this as well.</li>
<li>A <code>client</code> is a computer who isn&rsquo;t a member of the system, but is asking the system what the value is, or asking the system to take on a new value.</li>
</ul>


<p>Paxos is only a small piece of building a distributed database: it only implements the process to write exactly one new thing to the system. Processes governed by an instance of Paxos can either fail, and not learn anything, or by the end of it have a majority having learned the same value such that there is consensus. Paxos doesn&rsquo;t really tell us how to use this to build a database or anything like that, it is just the process which governs the individual communications between nodes as they execute one instance of deciding on one new value. So, for our purposes here, the thing we build with Paxos is a datumbase which can store exactly one value, and only once, such that you can&rsquo;t change it after you&rsquo;ve set it the first time.</p>

<h1>The read guts</h1>

<div id="read_demo"></div>


<p>To read a value from the basic Paxos system, a client asks all the processes in the system what they have stored for the current value, and then takes the value that the majority of the processes in the system hold. If there is no majority or if not enough processes respond, the read fails. To the left you can see a client asking the nodes what their value is, and them returning the value to the client. When the client gets a majority of responses agreeing on a value, it has successfully read it and keeps it handy.</p>

<p><br class="break" /></p>

<p>This is weird compared to single node systems. In both places, the client needs to make an observation on the system to determine the state, but in non-distributed systems like MySQL or one memcached process, the software only needs to ask the one canonical place where that state is stored. In simple Paxos, the client needs to observe the state the same way, but there is no canonical place where it is stored. It needs to ask all the members, so that it can be sure that there is actually only one value reported, and that it is in fact held by a majority of nodes. If the client just asked one node, it could be asking a process which is out of date, and get the &ldquo;wrong&rdquo; value. Processes can be out of date for all sorts of reasons: messages to them might have been dropped by unreliable networks, they might have failed and recovered with an out of date state, or the algorithm could still be underway and the process could have just not gotten it&rsquo;s messages quite yet. It is important to note that this is &ldquo;na√Øve&rdquo; Paxos: there are much better ways of doing reads when implementing a system using Paxos that don&rsquo;t require contacting every node for every read, but they extend beyond the original Paxos algorithm.</p>

<h1>The write guts</h1>

<p>Let&rsquo;s examine what Paxos makes our cluster of processes do when a client asks that a new value be written. The following procedure is all to get only one value written. Eventually we can use this process as a primitive to allow many values to be set one after another, but the basic Paxos algorithm governs the flow for the writing of just one new value, which is then repeated to make the thing actually useful.</p>

<div id="client_demo"></div>


<p>The process starts with a client of the Paxos governed system asks that a new value be set. The client here shows up as the red circle, and the processes show up as the teal circles. Paxos makes a guarantee that clients can send their write requests to any member of the Paxos cluster, so for the demos here the client picks one of the processes at random. This property is important and neat: it means that there is no single point of failure, which means our Paxos governed system can continue to be online (and useful) when <em>any</em> node goes down for whatever unfortunate yet unavoidable reason. If we designated one particular node as &ldquo;the proposer&rdquo;, or &ldquo;the master&rdquo; or what have you, then the whole system would grind to a halt if that node failed.</p>

<p>When this write request is received, the Paxos process that receives the write request &ldquo;proposes&rdquo; this new value to the system. &ldquo;Proposition&rdquo; is in fact a formalized idea in Paxos: proposals to a system governed by Paxos can succeed or fail, and are a required step to ensure consensus is maintained. This proposal is sent to the whole system by way of a <code>prepare</code> message from the process the client contacted to all the other processes it knows of.</p>

<h3>Sequence Numbers</h3>

<p>This <code>prepare</code> message holds inside it the value being proposed, as well as what&rsquo;s called a <em>sequence number</em> inside it. The sequence number is generated by the proposing process, and it declares that the receiving process should prepare to accept a proposal with that sequence number. This sequence number is key: it allows processes to differentiate between newer and older proposals. If two processes are trying to get a value set, Paxos says that value proposed last should take precedence, so this lets processes figure out which one is last, and thus who is trying to set the most recent value.</p>

<div id="prepare_demo"></div>


<p>These receiving processes are able to make a critical check in the system: is the sequence number on an incoming <code>prepare</code> message the highest I&rsquo;ve ever seen? If it is, then cool, I can prepare to accept this incoming value, and disregard any others I have heard of before. You can see this happening to in the demo on the right: the client proposes a new value every so often to one process, that process sends <code>prepare</code> messages to the other processes, and then those processes note that these successively higher sequence numbers trump the older ones, and let go of those old proposals.</p>

<p>This little ordering idea is what lets any member of the system issue proposal to avoid the single point of failure associated with a designated &ldquo;proposer&rdquo; node mentioned above. Without this ordering, members of the Paxos system would have no way to figure out which proposal is the one they should prepare to accept with confidence.</p>

<p>We could imagine a different consensus algorithm which didn&rsquo;t do this step of sending a first message to ask the other processes to make sure the value trying to be set is the most recent one. Although being way simpler, this would no longer satisfy the consensus algorithm safety requirements. If two processes started proposing different values right around the same time (like in the demos below), the universe could conspire against us and align the packets such that each dueling proposer convinces one half the processes to accept their own maybe-right-maybe-wrong value. The system could end up in a stalemate! There would exist two evenly sized groups having staged different value, which would lead to no value being accepted by a majority group. This stalemate is avoided by the first Paxos message exchange with sequence numbers that allow the processes to all resolve which proposal they should accept. With Paxos' sequence numbers, one of the dueling proposals would have a lower number than the other, and thus upon proposal receipt processes will have a way to unambiguously pick the most recent one. They&rsquo;d either get the higher number one first, and later receive the lower number one and reject it, or they&rsquo;d get higher numbered one second and thus replace the lower numbered one with it. Paxos solves the problem of consensus over time by taking hold of time itself with sequence numbers to apply temporal precedence.</p>

<div id="prepare_wrong_demo">
  <div class="viz"></div>
  <i>The above demo uses processes which just accept the most recent message as the "truth", instead of using sequence numbers. Because the clients send at the same time, we end up with a split brain where some process get one message last, and others get a different one. Consensus can't be reached!</i>
</div>




<div id="prepare_right_demo">
  <div class="viz"></div>
  <i>The above demo uses proper Paxos processes which examine the sequence number of the incoming proposal to figure out whether or not to actually prepare to accept the new value in tow. All the processes disambiguate properly, and consensus could be reached!</i>
</div>


<p><br class="break" /></p>

<p>Side note: it&rsquo;s important that no two proposers ever use the same sequence number, and that they are sortable, so that they truly reference only one proposal, and precedence between proposals can be decided using a simple comparison. When implementing Paxos, these globally unique and sortable sequence numbers are usually derivatives of precise system time and node number in the cluster so they grow over time and are never the same.</p>

<h3>Promises</h3>

<div id="promise_demo"></div>


<p>So, after the proposing process has sent out it&rsquo;s proposal, the processes check the proposal&rsquo;s sequence number against the highest they&rsquo;ve ever seen, and if it is the highest, they can make a promise to not accept any proposals older than this new threshold sequence number. This promise is returned as a message sent from the promising process to the one that is proposing a new value, as thing a <code>promise</code> message. This gives the proposing process the information it needs to count how many processes have sent their promises, and thus the basis to establish if it has reached a majority or not. If a majority of processes have agreed to accept this proposal or a higher sequenced one, the proposing process can know it &ldquo;has the floor&rdquo;, so to speak, and that progress is possible in the algorithm. If for whatever reason the proposer can&rsquo;t extract a majority of promises from the other processes, progress is impossible, since consensus couldn&rsquo;t be reached, so the proposal is aborted and the client is informed that the write failed.</p>

<p>To decide if a proposal has extracted enough promises, proposers simply count the number of <code>promise</code> messages they receive and compare against the total number of processes in the system. &ldquo;Enough&rdquo; promises here means promises from a majority (N/2 + 1) of processes in the system are received before a certain timeout. The simplest reason for this might be that more than half of the processes in the system have failed completely, so they wouldn&rsquo;t return <code>promise</code> messages ever. This means Paxos could never get the proposed value committed a majority of processes, and thus could never satisfy the majority requirements in the read algorithm described above, and thus couldn&rsquo;t reach consensus, so the proposal should be aborted. Other failure modes which would prevent a majority of promises being returned include things like a network partition preventing a proposer from contacting enough nodes, or more interestingly, a competing proposal having extracted <code>promise</code>s with a higher sequence number already.</p>

<h2>Acceptance</h2>

<div id="accept_demo"></div>


<p>Once a proposer has extracted promises from a majority of other processes, it asks the promising processes to &ldquo;accept&rdquo; the value they promised to before. This is the &ldquo;commit&rdquo; phase of the algorithm where progress is actually made. If there are no dueling proposals, failures, or partitions, then the proposal will be accepted by all nodes, and Paxos is complete! You can see this is the demo to the right when the second round of messages from the proposer, called the <code>accept</code> messages, cause the promised values to be taken on (sucked in) by all processes.</p>

<p>Acceptance of a particular process can fail however: if enough processes fail right after replying with a <code>promise</code> message, but before they receive the <code>accept</code> message, then the acceptance could only happen on a minority of nodes instead of a majority. In this case, the Paxos round is now in a weird state where some processes have accepted a value, but not all. This state, while undesirable, is actually &ldquo;consistent&rdquo; due to the read logic described far above: a client trying to read from the system must receive agreement from a majority of nodes on what the value actually is, so if it managed to contact all the nodes, different, conflicting values would be reported by different minorities of nodes. This would cause the read to fail, which sucks, but Paxos has remained consistent, and hasn&rsquo;t allowed a write to take place without consensus. This bad state is often corrected in real implementations by either repeating the accept phase to get more nodes and eventually a majority.</p>

<h3>Dueling Proposals</h3>

<p>Acceptance can also fail because of dueling proposals: the promise that promisers reply with is a contract to accept proposals with that proposal&rsquo;s sequence number, or higher. This means that a second proposal could come around after a first with a higher sequence number, and extract new promises from all the processes where they would no longer accept the first, earlier proposal. The first proposer however might not find out about this second proposal, and continue happily along in the Paxos algorithm, and send out it&rsquo;s <code>accept</code> messages. Upon receipt of those <code>accept</code> messages, the promising processes would note the lower sequence number than their second promises to the second proposer, and simply reject the <code>accept</code> messages. This is correct: the first proposal sadly hasn&rsquo;t made progress, but no value was accepted without consensus, and Paxos remains consistent. This kind of situation could easily arise if clients cause two different processes to start proposals at the same time, which you can see above.</p>

<p>The failure case here gets even more complicated if the second proposal comes around <em>after</em> acceptance has happened on some nodes for an earlier proposal. This is a Danger Zone for Paxos: if different processes have accepted different values, and especially if the groups of processes change which value they have accepted over time, reads of the system could return different values at different times for the same round of Paxos! That violates the consensus algorithm safety property that only one value can be reported by the system, so let&rsquo;s examine how Paxos handles successive proposals and acceptances.</p>

<p>Let&rsquo;s say that a second proposer recovers from a network partition and tries to propose a new value after a first proposer has already proposed a value, and already had that value accepted by a majority of processes. Paxos has &ldquo;completed&rdquo;, in that if the read algorithm was run, the first proposer&rsquo;s value would be reported as the value for the system. That said, this second proposer is allowed by Paxos despite the completed state, because it declares all stages repeatable to allow for failure correction. So, this second proposer can run, but it must not change what value has been accepted, to keep consensus in tact as described above.</p>

<p>To prevent these later proposals from changing the accepted value, Paxos adds a little doohickey to prevents proposal from having a different value than the first one. If any processes have already accepted a value, Paxos forces <em>any</em> proposal that comes after that to also have that same already-accepted value. Freaky, but this maintains consensus, because now the value can never change after acceptance has started. The way this is implemented is that the <code>promise</code> messages returned by processes which have already accepted a value also carry along what value has already been accepted, and can tell the proposer about old values that have been accepted. The proposer can then detect if a majority of nodes have already accepted an old value, and change it&rsquo;s proposal to match that value, or not run it at all. In a way, Paxos piggybacks a read operation on top of the promise phase to make sure that a proposal is in fact free to change the value of the system.</p>

<h3>Datumbase</h3>

<p>All this procedure accomplishes one thing: one durable write. Paxos itself has many variants that make it faster, introduce the ideas of masters, sacrifice pure fault tolerance for more speed, and tonnes of layers built on top which use it as a primitive to implement an actual database. An extremely interesting description of how to do this can be found in the Paxos Made Live paper listed below, but for us, this is the end. Thanks for reading! Please send any suggested edits, corrections, or feedback my way at <a href="mailto:harry@harry.me">harry@harry.me</a>.</p>

<h3>More Resources</h3>

<ul>
<li>The Part Time Parliment (the original Paxos paper) by Leslie Lamport: <a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-paxos.pdf">http://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-paxos.pdf</a></li>
<li>Paxos Made Simple: another attempt at explaining Paxos by the original author by &ldquo;deriving&rdquo; the algorithm using the invariants of the consensus problem <a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf">http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf</a></li>
<li>Paxos Made Live: an amazing paper from Google describing the challenges of their Paxos implementation in Chubby: <a href="http://static.googleusercontent.com/media/research.google.com/en//archive/paxos_made_live.pdf">http://static.googleusercontent.com/media/research.google.com/en//archive/paxos_made_live.pdf</a></li>
<li>A Quora thread explaining Paxos in a few different ways: <a href="https://www.quora.com/Distributed-Systems/What-is-a-simple-explanation-of-the-Paxos-algorithm">https://www.quora.com/Distributed-Systems/What-is-a-simple-explanation-of-the-Paxos-algorithm</a></li>
<li>Raft - An Understandable Consensus Algorithm. Raft is another conensus algorithm designed for humans to understand, which if you can tell from the above wall of text might be a problem with Paxos. <a href="https://ramcloud.stanford.edu/raft.pdf">https://ramcloud.stanford.edu/raft.pdf</a></li>
</ul>


<script src="http://harry.me/assets/paxos/paxos-0a2fdb0709bc3b199adb503478fb2f56.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Software Development Metrics]]></title>
    <link href="http://harry.me/blog/2014/08/16/on-software-development-metrics/"/>
    <updated>2014-08-16T12:57:00-04:00</updated>
    <id>http://harry.me/blog/2014/08/16/on-software-development-metrics</id>
    <content type="html"><![CDATA[<p>In which I try to justify data driven software development, just not for performance management.</p>

<!--more-->


<p>Shopify, where I work, has a business unit whose performance measurement and goals are all completely data driven. We know with a good degree of accuracy if the group is hitting its goals, we know exactly who in the group is excelling and who could use some help, and we know exactly how happy the clients of the group are. We sign contracts with business partners guaranteeing this group&rsquo;s performance because we are confident in it, and the data powering these measurements. These measurements are quantifiable data, which is amazing because we can slice and dice it to learn more about the nature of the group&rsquo;s performance and goals. We can ask valuable operational questions like &ldquo;when during the week does the work load mean we need to schedule more people&rdquo;, or &ldquo;how many people do we need to hire next quarter to keep our customers happy&rdquo;. We can ask valuable strategic questions as well, like &ldquo;does this change to the product affect outcomes&rdquo;, or &ldquo;should we switch everyone over to this new potentially more productive tool&rdquo;. Hard data powers better insight.</p>

<p>This group is, unfortunately, not comprised of software developers like me, but of sales and support staff at Shopify. They&rsquo;re measured using metrics: how many people did they talk to today, how long did they talk to each of them for, which of those people said the experience was good or bad, etc, which powers the above decisions. For all the concerns the support group has down pat we developers have little to no analog. We have no objective benchmark which tells us if we are meeting all our obligations, we have no objective measure of individual performance for accolades or accusations, and we only have murky, through the grapevine indications of how satisfied our development group&rsquo;s clients are. We can&rsquo;t really predict demand for developers with anything other than a loose survey of the team leads, and we struggle to run experiments concerning techniques or tooling using data to actually make it a bona fide experiment. This upsets me, because I believe that this lack of data inhibits effective decision making for my business group. I&rsquo;d really like to be able to run experiments, or to give long term hiring estimates to finance, or to understand internal customer satisfaction with our deliverables, but we just don&rsquo;t have the data to power these insights.</p>

<p>So, how could we measure developers and the software development process to try to drive answers to the above questions using data? Well, the industry consensus, and the ideology inside Shopify, is that you can&rsquo;t.</p>

<p>A mantra often repeated inside Shopify is &ldquo;if you want a number to go up, put it on a dashboard&rdquo;, and I&rsquo;ve found this to be true many times over. A metric gives us a clear goal and a clear report on our progress towards it, so we start getting rewarding feedback cycles as we accomplish things that push that metric in the right direction. We make changes to the product or the code, we see the metric on the dashboard change for the better, and we get our dopamine or our promotion or whatever. This said, every metric has a dual nature: it encourages those who care about it to figure out how to push it in the right direction, but at the cost of that metric potentially forcing people to care about the wrong thing. For the metric to encourage the correct behaviour, it must accurately capture the true goals of the business. If it doesn&rsquo;t, as soon as anyone or anything&rsquo;s performance is tied to that metric, they are likely going to start working towards improving it above serving the underlying business goals. Aligning people with a metric only serves the business if the metric captures the business' values completely, lest the metric be gamed.</p>

<p>Take, for example &ldquo;average customer satisfaction as measured by a short survey&rdquo;. If we decide to reward service staff based on this metric (among others), we will likely have happier customers, because our service staff is encouraged to satisfy customers. This aligns with the business goal of making more money by keeping customers around, so it is a good metric to stick on dashboards.</p>

<p>Take, for a counter example, a metric like &ldquo;lines of code added or removed this week&rdquo; as a way to compare developers. If we started paying developers on a per line basis, we&rsquo;d start seeing people making gigantic, overly verbose pull requests full of needless code and comments, because they&rsquo;d get paid more! This does not align with the business goal of developing product faster than our competitors, because developers will be busy writing useless comments and hard-to-maintain complex code. This is thus a bad metric, and not suitable for dashboarding or performance management.</p>

<p>This conundrum of capturing the business goals with a metric is the oft-touted reason that software developers often go without quantitative measurement, at least in a performance management context. No one has really thought of a good metric or combination thereof that really encapsulates all the competing goals during software development. The most frequently pondered metrics are things like lines of code added or removed, automated code complexity reporting, test coverage, test run time and run frequency, code churn / change frequency, or defect discovery or fix rate, which are all really elementary, shortsighted observations about the happenings with the code. These metrics don&rsquo;t bake in much understanding of true causality, long term maintainability, performance, security, among many other competing concerns good software developers spend time caring about.</p>

<p>The fact that we can&rsquo;t come up with a suitable performance measurement scheme does not mean we shouldn&rsquo;t measure the process though. Lines of code added or removed this period isn&rsquo;t suitable for a feedback system in a dashboard, but it is still an interesting measurement to have on a report. If it grows like crazy all of a sudden, don&rsquo;t you think it is worth investigating why? I&rsquo;ve only ever heard of people not caring about this metric, or taking a casual glance at it in Github Pulse, but it really is correlated with important things. If a new developer starts and the rate spikes, that developer could likely use some feedback about simplicity and brevity. If it doesn&rsquo;t change at all when a developer leaves, perhaps it is a good thing that developer has left, as the absence of their contributions should have at least been felt in the metric. The data that we do have is not useful for holistically measuring developers for performance review purposes, but it is useful for other insight. We correctly hesitate to practice <em>data driven</em> decision making using metrics like lines of code, but we forget that you can still make <em>data informed</em> decisions using these metrics as indicators.</p>

<p>For more examples: if test coverage plummets over the course of a few weeks, I&rsquo;d love to have a dashboard which tells me where and who authored the new, uncovered code. If one particular area of the code is changing over and over, it&rsquo;s likely a good candidate for the next refactor to try to make this change easier. If we had a report about the most frequently failed tests on local developer&rsquo;s full suite runs, we should probably look at the top failures to see if they are easy to understand or perhaps overly brittle.</p>

<p>The benefits of data warehousing apply just as well: by mixing and matching this data with itself, and other data from the organization, we are able to do incredible stuff we couldn&rsquo;t do before. We could join the lines added / removed history with the list of security incidents to see how old previously insecure code was, and then prompt an audit of code in the same age range to spot security issues before anyone nefarious beats us to it. We could correlate areas of code change with the aforementioned customer satisfaction surveys to see if we can tease out previously unknown relationships between changes to the product and changes in how customers perceive it. We could build data products for ourselves as well: we could make a bot which comments on Github when someone changes a particularly defective piece of code warning them to be extra careful, or we could optimize the order our tests run in so that those most likely to fail run first to give us fast feedback. So far at Shopify we&rsquo;ve had success reporting on which sections of our codebase need the most love by counting Github issues opened and closed segmented by label, as well as reporting on production exceptions and which areas they have occurred in.</p>

<p>In summary, don&rsquo;t let the fear of imperfect metrics for performance management stop you from gathering data, and doing some analysis on the software development process. Data driven organizations are more successful, and software development should be no exception.</p>

<h3>Further reading:</h3>

<ul>
<li>Measuring Performance Management in Organizations book by Robert D. Austin: <a href="http://www.amazon.com/gp/product/0932633366">http://www.amazon.com/gp/product/0932633366</a></li>
<li>A Stack Overflow discussion on measuring developer performance using data: <a href="http://pm.stackexchange.com/questions/5289/how-do-i-measure-employee-software-developer-performance-based-on-bugs-created">http://pm.stackexchange.com/questions/5289/how-do-i-measure-employee-software-developer-performance-based-on-bugs-created</a></li>
<li>IBM whitepaper on developer performance measurement using data: <a href="https://jazz.net/library/content/articles/insight/performance-management.pdf">https://jazz.net/library/content/articles/insight/performance-management.pdf</a> , and an article on the implementation of this: <a href="http://www.networkworld.com/article/2182958/software/how-ibm-started-grading-its-developers--productivity.html">http://www.networkworld.com/article/2182958/software/how-ibm-started-grading-its-developers--productivity.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'd like to have an argument: A primer on consensus]]></title>
    <link href="http://harry.me/blog/2013/07/07/id-like-to-have-an-argument-a-primer-on-consensus/"/>
    <updated>2013-07-07T14:32:00-04:00</updated>
    <id>http://harry.me/blog/2013/07/07/id-like-to-have-an-argument-a-primer-on-consensus</id>
    <content type="html"><![CDATA[<p>If you are, say, a piece of e-commerce software, and, say, you want a record of when your customers buy stuff, how might you ensure that you get a record of each transaction every single time one happens? Money is changing hands, and people aren&rsquo;t very fond of losing money without any gain in return, so having a correct ledger for transactions sure is important.</p>

<!--more-->


<p>You certainly can&rsquo;t just leave this record on one computer, since that computer&rsquo;s disk might die and leave you with none of your data. You could put it on two computers so that if one died you&rsquo;d still have the record on the other computer, but you&rsquo;d have to make sure that you write the information to both computers every time. Worse is that you must make sure that your cherished record gets written to both computers before you move on and accept more transactions, because if it doesn&rsquo;t assuredly make it to both places, there&rsquo;s a small chance you might only have one copy, and thus again risk losing that data.</p>

<p>If, say, your data set grew to be so important that simple dual redundancy was inadequate, you could network some computers who would all be responsible for storing the data. Now that this has happened you are beginning to have an interesting problem: how does your system behave when one of these computers fails? Ideally, if only one of ten of the machines gets its power cord tripped over, you should still be able to add more stuff to the other computers. After all, the more computers we add to increase redundancy, the more likely any failure at all is to occur, since we now have ten things that can fail instead of just one. We still want to make sure that when we write some data to this cluster, it is assuredly written to some bunch of boxes, but ideally it doesn&rsquo;t need to be all ten so that the system can sustain inevitable failures.</p>

<h3>This isn&rsquo;t an argument, it&rsquo;s just contradiction!</h3>

<p>A possible strategy would be to designate one computer as the &ldquo;master&rdquo;, whose responsibilities would be to manage all the incoming write requests from clients of the system by doling them out to the other computers which it knows are online. Designating a master sounds good since we now have one computer who can decide if the system is ready to accept writes. This is to say that if enough computers fail, our beloved transaction ledger thing should enter an &ldquo;unwritable&rdquo; state, where no transactions can occur because we can&rsquo;t safely store them. For this transaction log, we&rsquo;d rather go down than lose data, again because people sure do love their money.</p>

<p>So, going with this strategy for a moment longer, we could program our master node to watch for node deaths, and decide if there is still enough online to continue accepting writes. There is one major glaring problem however: the master itself might fail. We&rsquo;d need a new master, and lickity split. Then you might think, well, I&rsquo;ll just have some other computer detect that the master computer has failed, and designate another one as the master! Easy peasy.</p>

<p>As simple as that you have stumbled upon a tough computer science problem. Whichever computers remain after a master failure need to somehow arrive at an agreement on who is going to be the next master. If all the computers leapt up and declared themselves the master, we could start having two different data sets, where depending on who you ask the same person has different amounts of money! If no computers declare themselves the master, the system stops working, and no one can buy stuff, which is also less than ideal. The process these computers should follow to designate one and only one new master is called reaching consensus.</p>

<p>The consensus problem is one of the quintessential building blocks of distributed systems, and seems to be regarded as one of the tougher ones from both a conceptual and software engineering point of view. Depending on what subset of the problems you look at, the aim is to define a rigorous process for submitting a value to a cluster of machines who will try reach consensus in the face of the expected failures, or unexpected ones like buggy software, or even goodness gracious holy macaroni <em>malicious agents</em> participating in the cluster. The cluster can agree to not accept a new value when one is submitted, or it can take a significant amount of time to accept it, but the key is that by the end of the process, the cluster &ldquo;agrees&rdquo; on what the &ldquo;true&rdquo; value is. This true value could be the one the cluster held before anything happened, or the newly submitted value, but the idea is that there is only one. The &ldquo;true&rdquo; value here is a convenient yet misleading metaphor, since again, depending on who or how many people you ask, the answer is different. That said, the role of a consensus algorithm is to define both how to submit a new value to the system, and also how to retrieve the &ldquo;true&rdquo; value the system has adopted. A handy definition of the &ldquo;true&rdquo; value read algorithm is just to ask everyone and see what value the majority of the cluster thinks the value is.</p>

<p>The reasons this problem is challenging arise from the simple fact that both processes and humans are unreliable. Disks fail, cords get unplugged, engineers write bugs, and yet all the while we still want to buy stuff. It wouldn&rsquo;t be too tough to write a goofy consensus algorithm I shall enjoy titling &ldquo;dunnolol&rdquo; which just rejects any new incoming values in the event of any of these failures. Due to these failures' inevitability &ldquo;dunnolol&rdquo;, despite being simple, is relatively useless. The consensus problem holds us engineers to a higher standard of coming up with a way for a cluster of processes with some errors to remain resilient and still accept new values for data.</p>

<h3>Argument is an intellectual process</h3>

<p>Consensus problem solvers enjoy a number of horrid subproblems stemming from the fact that they must admit that there is such a thing as time. Many clients might try to propose a new value to the system around the same time, so problem solvers have to decide if they are going to impose an ordering on the operations the system takes. Messages between processes might arrive slowly, or even out of order as well, which means state has to be very carefully tracked by all actors in the show. A correct implementation of a solution to the problem must guarantee that one and only one value is agreed upon as the true value by the system at one instant. This means it must be completely resilient to conflicting clients proposing conflicting values, and bake in some sort of prevention of different factions of the system trying to pick one of the clients as the correct one.</p>

<p>All this boils <del>down</del> over into a few decades of research. As best I can tell, the state of the art consensus algorithm is one called <a href="http://en.wikipedia.org/wiki/Paxos_(computer_science">Paxos</a>, so if you are looking to see how things relying on consensus are actually built, I&rsquo;d say start there. Interestingly very recently a new consensus algorithm has risen to prominence in the zeitgeist: <a href="https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf">Raft</a>. Raft interests me because it&rsquo;s been designed for understandability as well as correctness, so it may be worth investigating as well. There&rsquo;s also a number of resources describing concrete implementations of Paxos and the myriad of challenges associated with it which are simultaneously horrifying and interesting.</p>

<h3>More resources:</h3>

<ul>
<li>Paxos author&rsquo;s list of papers: <a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/pubs.html">http://research.microsoft.com/en-us/um/people/lamport/pubs/pubs.html</a></li>
<li>Paxos author&rsquo;s simplest explanation of Paxos: <a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf">http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf</a></li>
<li>Seminal paper on Raft: <a href="https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf">https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf</a></li>
<li>Raft&rsquo;s parent project, RAMCloud: <a href="https://ramcloud.stanford.edu/wiki/display/ramcloud/RAMCloud">https://ramcloud.stanford.edu/wiki/display/ramcloud/RAMCloud</a></li>
<li>Google&rsquo;s report on implementing Paxos: <a href="http://www.read.seas.harvard.edu/~kohler/class/08w-dsi/chandra07paxos.pdf">http://www.read.seas.harvard.edu/~kohler/class/08w-dsi/chandra07paxos.pdf</a></li>
<li>Microsoft&rsquo;s Will Portnoy&rsquo;s blog on implementing Paxos: <a href="http://blog.willportnoy.com/2012/06/lessons-learned-from-paxos.html">http://blog.willportnoy.com/2012/06/lessons-learned-from-paxos.html</a></li>
<li>Monty Python&rsquo;s &ldquo;Argument Clinic&rdquo;: <a href="http://www.youtube.com/watch?v=kQFKtI6gn9Y">http://www.youtube.com/watch?v=kQFKtI6gn9Y</a></li>
</ul>


<p> Thanks to <a href="https://twitter.com/camilolopez">@camilo</a> and <a href="https://twitter.com/dellsystem">@dellsystem</a> for helping edit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reinvigoration: Really just a new theme]]></title>
    <link href="http://harry.me/blog/2013/05/12/reinvigoration-really-just-a-new-theme/"/>
    <updated>2013-05-12T12:41:00-04:00</updated>
    <id>http://harry.me/blog/2013/05/12/reinvigoration-really-just-a-new-theme</id>
    <content type="html"><![CDATA[<p>Yep. That&rsquo;s all. This is a test post, and secretly an attempt at making this blog look a bit more loved, whoopee!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Documentation Sucks]]></title>
    <link href="http://harry.me/blog/2012/01/22/javascript-documentation-sucks/"/>
    <updated>2012-01-22T12:41:00-05:00</updated>
    <id>http://harry.me/blog/2012/01/22/javascript-documentation-sucks</id>
    <content type="html"><![CDATA[<p>I want to use your JavaScript library. I really do.</p>

<p>Unfortunately, a lot of you are bad at documenting it, so I can&rsquo;t figure out how to use it before I give up and find something easier to learn.</p>

<!--more-->


<p>If you use <a href="http://jashkenas.github.com/docco/">docco</a>, this is because you write your documentation in the same way you write your code. Like a good team hacker you write your code with the principal design goal of making it easy for the next person working on the project, and only after satisfying that do you write for the other decidedly more mechanical audience. You strive to structure your code so that new functionality can be bolted on, or bits and bobs twiddled with to make the whole thing faster, and only serving the goal of getting the computer to do work in as elegant a manner as possible. This is awesome. Maintainable and readable code is awesome. In an effort to make it even more awesome, you start leaving some comments around. You say to yourself, well golly gee shucks, it would be nice if I had a reminder that this function&rsquo;s boolean argument indicates this or that; or maybe it would be nice to remember what all these <code>RegExp</code> back-references which I&rsquo;ve rarely used before actually mean.</p>

<p>The problem is this: these comments are oriented at someone trying to understand the code, not just use it, so when you pull them out, they document how the code works, not how to use it. Someone looking to know how to use a function cares not that it calls out to something which takes a boolean parameter. Someone looking to instantiate a class to get work done cares not that some part of it uses a <code>RegExp</code> to accomplish its tasks. What someone does care about is the API that class or function exposes, and what work it does that is helpful. The whole point of abstracting something useful into a library is that I don&rsquo;t have to write that code myself when I use it, instead I can understand only the surface of it, and rely on you to have done a good job implementing the thing. I don&rsquo;t want to have to read through the whole piece of code to understand how to call into it. You&rsquo;ve structured it for a developer looking to change it, not to use it, so I get lost, and your explanatory comments usually don&rsquo;t tell me function signatures or typical ways I might call them. It doesn&rsquo;t make sense to make someone who wants to consume your library have to traverse your one monolithic HTML page to find the one stupid function signature they are looking for.</p>

<p>So, for things that aren&rsquo;t quick and dirty, or aren&rsquo;t exhibitions, I don&rsquo;t like docco. If you want to generate awesome docs meant for consumption by people hacking on the project, by all means, use docco, √† la <a href="http://pow.cx/docs/">pow</a>. I really don&rsquo;t like people thinking docco or dox can be used for API documentation however. I believe this was never its intended purpose, but it <a href="https://github.com/echonest/nestjs">certainly</a> <a href="https://github.com/fd/chains.js/tree/50dce330d9f7f588643c016fec28cf1e6bdb34c6/docs">has</a> <a href="https://github.com/jgallen23/fidel">been</a> <a href="https://github.com/podviaznikov/fanfeedr">repurposed</a> <a href="https://github.com/waterfield/redeye">for</a> <a href="https://github.com/killdream/latte/tree/75ecff7a07b88d98aaed672ccc1408a753da88d7">this</a>. Perhaps developers feel that docco and company are suitable for creating API documentation because they, along with JSDoc, are the high visibility tools available in the JavaScript ecosystem. The misappropriation of docco isn&rsquo;t rampant but the problem is even more insidious than just this. There are some who go the opposite route and orient their comments for consumers using tools like JSDoc. I desire to have JavaScript libraries documented so I can use them, and the idea of a common tool like RDoc (and YARD) giving us something like <a href="http://rdoc.info">rdoc.info</a> would be amazing but for me, JSDoc is not the answer.</p>

<p>The problem again, is this: when you orient your comments at consumers, development becomes simultaneous development and documentation, which is just plain unpleasant. I think it&rsquo;s absolutely insane to have a 10 to 1 comment to code ratio in a file. It is outrageous to expect developers to work in files where each function has been meticulously explained, with all the available options listed and explained, as well as numerous examples of usage, all in a comment block just above the definition. Class bodies end up being enormous, and you can&rsquo;t fit a function body and the body of those called in the first body on the same screen. I find scrolling through the grey molasses terribly inefficient when trying to reason about or work on the code at hand. I cite the Rails source, or at least the portions of it which expose APIs aimed at developers, as an example of how challenging it is to navigate code with inline documentation. You just can&rsquo;t write clear, concise, readable code, at the same time as writing exhaustive, useful documentation when they co-exist in the same file.</p>

<p>You may say, Harry, these comments are wonderful, because we will change our comments when the code changes; they are right there, they will be in sync! I absolutely concede this: the closer the words for humans are to the words for the computer the easier a job we will have of keeping them accurate during change. Harry, you might say, now I can declare the types I expect my arguments to have and people can provide them. Harry, smart IDEs could even verify these types! I can almost pretend its a statically typed language! Again, you have a point, this information is valuable both to the library hacker and the library consumer, and maybe some IDEs I don&rsquo;t use are smart about the <code>@param</code> declarations. Harry, you say, use an editor where you can ignore comments or fold them. I say back at you: vim folds are hard, and I am lazy, and I&rsquo;m not always in my own editor where I know how to fold.</p>

<p>To me, the clutter is simply not worth the advantages. We should design code such that the next man or woman coming along can edit it and succeed. We should not sacrifice their chances of success by making them work in and around the screen filling comment blocks. The code is the uniquely canonical specification for how it can be used. It implicitly declares all of its use cases, but it doesn&rsquo;t have to go ahead and be explicit about all those use cases by talking about them at length inline. It is essential that these examples and signatures and use cases are found somewhere, but I make the conscious decision to move my consumer documentation out of the code such that the code can be clear and unencumbered. Some project owners create gargantuan READMEs, or HTML guide style documentation, or GitHub wikis that these signatures and examples and whatnot look amazing inside. The shining examples from my world are the Django docs, the Rails Guides (and recently the SproutCore guides), and inside the JS world the Mongoose, Express, and Testling documentation sites. These are all curated sets of words for humans as well as code examples for humans showing how to consume a piece of software in another one. The problem comes down to actually creating these words, and continuing to maintain them after they&rsquo;ve been released. APIs inevitably change, so docs inevitably go out of date. The worst aspect is that developers may not make changes because it is twice as much work as it might be normally. You must write the test, write the code, and now find all the places that code you changed is referenced in the docs and change them. There are of course notable exceptions, but in the JavaScript community I find myself learning how to use something from its README, and then spelunking in the code to find out the nuances.</p>

<p>This situation may not be as dire as I make it out to be, because if it were better tools would have evolved. It often seems to suffice in our community to ask people to read your tests or Google every second thing to figure out how to do it. Those amazing library authors who have the self control to document seem to either publish annotated source, write enormous comments, or pour their hearts into markdown&rsquo;d READMEs and static sites. The annotated source isn&rsquo;t a good reference for consumers, JSDoc block comments impede development, and the README&rsquo;d source can fall out of sync easily, as it has with my principle project, Batman.</p>

<p>So, I ask you, what is a JavaScript developer to do? How do I let people use my project, while developing unencumbered?</p>

<p>I would like to know, but I also have my own storm a'brewin. The solution is underway but can be found here: <a href="https://github.com/hornairs/percolate.">https://github.com/hornairs/percolate.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Batman?]]></title>
    <link href="http://harry.me/blog/2011/09/19/why-batman/"/>
    <updated>2011-09-19T12:41:00-04:00</updated>
    <id>http://harry.me/blog/2011/09/19/why-batman</id>
    <content type="html"><![CDATA[<p><a href="http://batmanjs.org/">Batman.js</a> is <a href="http://shopify.com">Shopify</a>&rsquo;s new open source CoffeeScript framework, and I&rsquo;m absolutely elated to introduce it to the world after spending so much time on it. Find Batman on GitHub <a href="https://github.com/Shopify/batman">here</a>.</p>

<p>Batman emerges into a world populated with extraordinary frameworks being used to great effect. With the incredible stuff being pushed out in projects like <a href="http://www.sproutcore.com/about/">Sproutcore 2.0</a> and <a href="http://documentcloud.github.com/backbone/">Backbone.js</a>, how is a developer to know what to use when? There&rsquo;s only so much time to play with cool new stuff, so I&rsquo;d like to give a quick tour of what makes Batman different and why you might want to use it instead of the other amazing frameworks available today.</p>

<!--more-->


<h2>Batman makes building apps easy</h2>

<p>Batman is a framework for building single page applications. It&rsquo;s not a progressive enhancement or a single purpose DOM or AJAX library. It&rsquo;s built from the ground up to make building awesome single page apps by implementing all the lame parts of development like cross browser compatibility, data transport, validation, custom events, and a whole lot more. We provide handy helpers for development to generate and serve code, a recommended app structure for helping you organize code and call it when necessary, a full MVC stack, and a bunch of extras, all while remaining less than 18k when gzipped. Batman doesn&rsquo;t provide the basics, or the whole kitchen sink, but a fluid API that allows you to write the important code for your app and none of the boilerplate.</p>

<h2>A super duper runtime</h2>

<p>At the heart of Batman is a runtime layer used for manipulating data from objects and subscribing to events objects may emit. Batman&rsquo;s runtime is used similarly to SproutCore&rsquo;s or Backbone&rsquo;s in that all property access and assignment on Batman objects must be done through <code>someObject.get</code> and <code>someObject.set</code>, instead of using standard dot notation like you might in vanilla JavaScript. Adhering to this property system allows you to:</p>

<ul>
<li>transparently access &ldquo;deep&rdquo; properties which may be simple data or computed by a function,</li>
<li>inherit said computed properties from objects in the prototype chain,</li>
<li>subscribe to events like <code>change</code> or <code>ready</code> on other objects at &ldquo;deep&rdquo; keypaths,</li>
<li>and most importantly, dependencies can be tracked between said properties, so chained observers can be fired and computations can be cached while guaranteed to be up-to-date.</li>
</ul>


<p>All this comes free with every Batman object, and they still play nice with vanilla JavaScript objects. Let&rsquo;s explore some of the things you can do with the runtime. Properties on objects can be observed using <code>Batman.Object::observe</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">crimeReport = </span><span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'><span class="nx">crimeReport</span><span class="p">.</span><span class="nx">observe</span> <span class="s">&#39;address&#39;</span><span class="p">,</span> <span class="nf">(newValue) -&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">DangerTracker</span><span class="p">.</span><span class="nx">isDangerous</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">crimeReport</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;currentTeam&#39;</span><span class="p">).</span><span class="nx">warnOfDanger</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This kind of stuff is available in Backbone and SproutCore both, however we&rsquo;ve tried to bring something we missed in those frameworks to Batman: &ldquo;deep&rdquo; keypaths. In Batman, any keypath you supply can traverse a chain of objects by separating the keys by a <code>.</code> (dot). For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">batWatch = </span><span class="nx">Batman</span>
</span><span class='line'>  <span class="nv">currentCrimeReport: </span><span class="nx">Batman</span>
</span><span class='line'>    <span class="nv">address: </span><span class="nx">Batman</span>
</span><span class='line'>      <span class="nv">number: </span><span class="s">&quot;123&quot;</span>
</span><span class='line'>      <span class="nv">street: </span><span class="s">&quot;Easy St&quot;</span>
</span><span class='line'>      <span class="nv">city: </span><span class="s">&quot;Gotham&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">batWatch</span><span class="p">.</span><span class="nx">get</span> <span class="s">&#39;currentCrimeReport.address.number&#39;</span> <span class="c1">#=&gt; &quot;123&quot;</span>
</span><span class='line'><span class="nx">batWatch</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;currentCrimeReport.address.number&#39;</span><span class="p">,</span> <span class="s">&quot;461A&quot;</span>
</span><span class='line'><span class="nx">batWatch</span><span class="p">.</span><span class="nx">get</span> <span class="s">&#39;currentCrimeReport.address.number&#39;</span> <span class="c1">#=&gt; &quot;461A&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works for observation too:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">batWatch</span><span class="p">.</span><span class="nx">observe</span> <span class="s">&#39;currentCrimeReport.address.street&#39;</span><span class="p">,</span> <span class="nf">(newStreet, oldStreet) -&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">DistanceCalculator</span><span class="p">.</span><span class="nx">travelTime</span><span class="p">(</span><span class="nx">newStreet</span><span class="p">,</span> <span class="nx">oldStreet</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">100000</span>
</span><span class='line'>    <span class="nx">BatMobile</span><span class="p">.</span><span class="nx">bringTo</span><span class="p">(</span><span class="nx">batWatch</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;currentLocation&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The craziest part of the whole thing is that these observers will always fire with the value of whatever is at that keypath, even if intermediate parts of the keypath change.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">crimeReportA = </span><span class="nx">Batman</span>
</span><span class='line'>  <span class="nv">address: </span><span class="nx">Batman</span>
</span><span class='line'>    <span class="nv">number: </span><span class="s">&quot;123&quot;</span>
</span><span class='line'>    <span class="nv">street: </span><span class="s">&quot;Easy St&quot;</span>
</span><span class='line'>    <span class="nv">city: </span><span class="s">&quot;Gotham&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">crimeReportB = </span><span class="nx">Batman</span>
</span><span class='line'>  <span class="nv">address: </span><span class="nx">Batman</span>
</span><span class='line'>    <span class="nv">number: </span><span class="s">&quot;72&quot;</span>
</span><span class='line'>    <span class="nv">street: </span><span class="s">&quot;Jolly Ln&quot;</span>
</span><span class='line'>    <span class="nv">city: </span><span class="s">&quot;Gotham&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">batWatch = </span><span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span><span class="p">({</span><span class="nv">currentCrimeReport: </span><span class="nx">crimeReportA</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">batWatch</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;currentCrimeReport.address.street&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;East St&quot;</span>
</span><span class='line'><span class="nx">batWatch</span><span class="p">.</span><span class="nx">observe</span> <span class="s">&#39;currentCrimeReport.address.street&#39;</span><span class="p">,</span> <span class="nf">(newStreet) -&gt;</span>
</span><span class='line'>  <span class="nx">MuggingWatcher</span><span class="p">.</span><span class="nx">checkStreet</span><span class="p">(</span><span class="nx">newStreet</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">batWatch</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;currentCrimeReport&#39;</span><span class="p">,</span> <span class="nx">crimeReportB</span><span class="p">)</span>
</span><span class='line'><span class="c1"># the &quot;MuggingWatcher&quot; callback above will have been called with &quot;Jolly Ln&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice what happened? Even though the middle segment of the keypath changed (a whole new <code>crimeReport</code> object was introduced), the observer fires with the new deep value. This works with arbitrary length keypaths as well as intermingled <code>undefined</code> values.</p>

<p>The second neat part of the runtime is that because all access is done through <code>get</code> and <code>set</code>, we can track dependencies between object properties which need to be computed. Batman calls these functions <code>accessors</code>, and using the CoffeeScript executable class bodies they are really easy to define:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">BatWatch</span> <span class="k">extends</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'>  <span class="c1"># Define an accessor for the `currentDestination` key on instances of the BatWatch class.</span>
</span><span class='line'>  <span class="nx">@accessor</span> <span class="s">&#39;currentDestination&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">address = </span><span class="nx">@get</span> <span class="s">&#39;currentCrimeReport.address&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">address</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;number&#39;</span><span class="p">)</span><span class="si">}</span><span class="s"> </span><span class="si">#{</span><span class="nx">address</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;street&#39;</span><span class="p">)</span><span class="si">}</span><span class="s">, </span><span class="si">#{</span><span class="nx">address</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;city&#39;</span><span class="p">)</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">crimeReport = </span><span class="nx">Batman</span>
</span><span class='line'>  <span class="nv">address: </span><span class="nx">Batman</span>
</span><span class='line'>    <span class="nv">number: </span><span class="s">&quot;123&quot;</span>
</span><span class='line'>    <span class="nx">street</span> <span class="s">&quot;Easy St&quot;</span>
</span><span class='line'>    <span class="nv">city: </span><span class="s">&quot;Gotham&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">watch = </span><span class="k">new</span> <span class="nx">BatWatch</span><span class="p">(</span><span class="nv">currentCrimeReport: </span><span class="nx">crimeReport</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">watch</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;currentDestination&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;123 Easy St, Gotham&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Importantly, the observers you may attach to these computed properties will fire as soon as you update their dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">watch</span><span class="p">.</span><span class="nx">observe</span> <span class="s">&#39;currentDestination&#39;</span><span class="p">,</span> <span class="nf">(newDestination) -&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">newDestination</span>
</span><span class='line'><span class="nx">crimeReport</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&#39;address.number&#39;</span><span class="p">,</span> <span class="s">&quot;124&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># &quot;124 Easy St, Gotham&quot; will have been logged to the console</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also define the default accessors which the runtime will fall back on if an object doesn&rsquo;t already have an accessor defined for the key being <code>get</code>ted or <code>set</code>ted.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">jokerSimulator = </span><span class="k">new</span> <span class="nx">Batman</span><span class="p">.</span><span class="nb">Object</span>
</span><span class='line'><span class="nx">jokerSimulator</span><span class="p">.</span><span class="nx">accessor</span> <span class="nf">(key) -&gt;</span> <span class="s">&quot;</span><span class="si">#{</span><span class="nx">key</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span><span class="si">}</span><span class="s">, HA HA HA!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">jokerSimulator</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;why so serious&quot;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;WHY SO SERIOUS, HA HA HA!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This feature is useful when you want to present a standard interface to an object, but work with the data in nontrivial ways underneath. For example, <code>Batman.Hash</code> uses this to present an API similar to a standard JavaScript object, while emitting events and allowing objects to be used as keys.</p>

<h2>What&rsquo;s it useful for?</h2>

<p>The core of Batman as explained above makes it possible to know when data changes as soon as it happens. This is ideal for something like client side views. They&rsquo;re no longer static bundles of HTML that get cobbled together as a long string and sent to the client, they are long lived representations of data which need to change as the data does. Batman comes bundled with a view system which leverages the abilities of the property system.</p>

<p>A simplified version of the view for <a href="http://batmanjs.org/examples/alfred.html">Alfred</a>, Batman&rsquo;s todo manager example application, lies below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Alfred<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;items&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">data-foreach-todo=</span><span class="s">&quot;Todo.all&quot;</span> <span class="na">data-mixin=</span><span class="s">&quot;animation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;todo.isDone&quot;</span> <span class="na">data-event-change=</span><span class="s">&quot;todo.save&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">data-bind=</span><span class="s">&quot;todo.body&quot;</span> <span class="na">data-addclass-done=</span><span class="s">&quot;todo.isDone&quot;</span> <span class="na">data-mixin=</span><span class="s">&quot;editable&quot;</span><span class="nt">&gt;&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">data-event-click=</span><span class="s">&quot;todo.destroy&quot;</span><span class="nt">&gt;</span>delete<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;Todo.all.length&quot;</span><span class="nt">&gt;&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">data-bind=</span><span class="s">&quot;&#39;item&#39; | pluralize Todo.all.length&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">data-formfor-todo=</span><span class="s">&quot;controllers.todos.emptyTodo&quot;</span> <span class="na">data-event-submit=</span><span class="s">&quot;controllers.todos.create&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;new-item&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;add a todo item&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;todo.body&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We sacrifice any sort of transpiler layer (no HAML), and any sort of template layer (no Eco, jade, or mustache). Our views are valid HTML5, rendered by the browser as soon as they have been downloaded. They aren&rsquo;t JavaScript strings, they are valid DOM trees which Batman traverses and populates with data without any compilation or string manipulation involved. The best part is that Batman &ldquo;binds&rdquo; a node&rsquo;s value by observing the value using the runtime as presented above. When the value changes in JavaScript land, the corresponding node attribute(s) bound to it update automatically, and the user sees the change. Vice versa remains true: when a user types into an input or checks a checkbox, the string or boolean is set on the bound object in JavaScript. The concept of bindings isn&rsquo;t new, as you may have seen it in things like Cocoa, or in <a href="http://knockoutjs.com/">Knockout</a> or Sproutcore in JS land.</p>

<p>We chose to use bindings because we a) don&rsquo;t want to have to manually check for changes to our data, and b) don&rsquo;t want to have to re-render a whole template every time one piece of data changes. With mustache or <code>jQuery.tmpl</code> and company, I end up doing both those things surprisingly often. It seems wasteful to re-render every element in a loop and pay the penalty for appending all those nodes, when only one key on one element changes, and we could just update that one node. SproutCore&rsquo;s &lsquo;SC.TemplateView&rsquo; with Yehuda Katz' <a href="http://www.handlebarsjs.com/">Handlebars.js</a> do a good job of mitigating this, but we still didn&rsquo;t want to do all the string ops in the browser, and so we opted for the surgical precision of binding all the data in the view to exactly the properties we want.</p>

<p>What you end up with is a fast render with no initial loading screen, at the expense of the usual level of complex logic in your views. Batman&rsquo;s view engine provides conditional branching, looping, context, and simple transforms, but thats about it. It forces you to write any complex interaction code in a packaged and reusable <code>Batman.View</code> subclass, and leave the HTML rendering to the thing that does it the best: the browser.</p>

<h2>More?</h2>

<p>Batman does more than this fancy deep keypath stuff and these weird HTML views-but-not-templates. We have a routing system for linking from quasi-page to quasi-page, complete with named segments and GET variables. We have a <code>Batman.Model</code> layer for retrieving and sending data to and from a server which works out of the box with storage backends like Rails and <code>localStorage</code>.  We have other handy mixins for use in your own objects like <code>Batman.StateMachine</code> and <code>Batman.EventEmitter</code>. And, we have a lot more on the ay. I strongly encourage you to check out the <a href="http://batmanjs.org/">project website</a>, the <a href="https://github.com/Shopify/batman">source on GitHub</a>, or visit us in <a href="irc://freenode.net/batmanjs">#batmanjs on freenode</a>. Any questions, feedback, or patches will be super welcome, and we&rsquo;re always open to suggestions on how we can make Batman better for you.</p>

<p>Until next time&hellip;.</p>

<iframe width="560" height="345" src="http://www.youtube.com/embed/X0UJaprpxrk" frameborder="0" allowfullscreen></iframe>


<p><br/>
<em>This article has been crossposted to the <a href="http://www.shopify.com/">Shopify</a> Technology blog <a href="http://www.shopify.com/technology/4080092-how-batman-can-help-you-build-app">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Neat Algorithms - Harmony Search]]></title>
    <link href="http://harry.me/blog/2011/07/05/neat-algorithms-harmony-search/"/>
    <updated>2011-07-05T12:41:00-04:00</updated>
    <id>http://harry.me/blog/2011/07/05/neat-algorithms-harmony-search</id>
    <content type="html"><![CDATA[<p>Here I&rsquo;ll try and demonstrate a neat optimization algorithm based on the principles of performing jazz musicians by applying it to solve Sudoku puzzles. <strong>Update Sept 28th 2015</strong>: Turns out this algorithm is ballyhoo and I don&rsquo;t like it any more, use something else. Kind of a fun idea though. See <a href="http://www.dennisweyland.net/blog/?p=12">http://www.dennisweyland.net/blog/?p=12</a>.</p>

<p>Harmony Search (often abbreviated HS) is a <a href="http://en.wikipedia.org/wiki/Metaheuristic">metaheuristic optimization</a> algorithm pioneered by <a href="https://sites.google.com/a/hydroteq.com/www/">Dr Zong Woo Geem</a>. Metaheuristic algorithms like harmony search attempt to find the optimal input to some objecting measure of quality, or in other words, find the &ldquo;best&rdquo; solution to a given problem. Harmony search has been successfully applied to a vast array of such problems, such as the Travelling Salesman problem, water network design, and actual algorithmic music generation.</p>

<!--more-->


<p>See the algorithm in action:</p>

<div id="searchVis"></div>


<h1>Table of Contents</h1>

<ol>
<li><a href="#searchVis">Demo</a></li>
<li><a href="#heuristics">Intro to Metaheuristics</a></li>
<li><a href="#harmony_search">Harmony Search</a></li>
<li><a href="#exam_example">Exam Mark Demo</a></li>
<li><a href="#sudoku_example">Sudoku Demo and Analysis</a></li>
</ol>


<h1>About this page</h1>

<p>This page features interactive demos and code examples, all written in <a href="http://coffeescript.org/">Coffeescript</a>. It shouldn&rsquo;t be too hard to pick up if you haven&rsquo;t seen it before, but visit that page if you want a quick primer on the syntax. If thats too much to ask, know that variables prefixed with <code>@</code> symbols signify instance variables, and that the last value of a block is the implicit return value, and you should be good. The example code you see in the post is also a distilled, unoptimized, nuance-lacking version which gets rid of the boring stuff for your benefit, so don&rsquo;t make fun if it seems slow.</p>

<p>Also, the computationally intense demo above has an intensity setting you can pick. Pick <code>poutine</code> mode only if you run Chrome or want to watch your browser get crushed. The first three settings defer to the UI thread often enough to stay responsive, but <code>poutine</code> mode uses web workers to destroy FF3, FF4, and Opera on my machine faster than you can say &ldquo;higgitus figgitus&rdquo;. <code>Poutine</code> mode is called as such because the browser gobbles up CPU power like I gobble up the aforementioned artery clogger at 3 AM on a Saturday night. Very quickly.</p>

<h1 id="heuristics">Heuristics and Fitness</h1>


<p>Harmony search as well as the above mentioned algorithms are useful for solving a very wide class of problems. Below we&rsquo;ll apply it to one problem in particular, but first lets examine the role of a metaheuristic algorithm.</p>

<p>The central idea is that when trying to solve some given optimization problem, you have some set of input variables that can be evaluated for their quality, and you want to know what inputs produce the best quality. Metaheuristic algorithms try to find this global optimum using some strategy which is better than brute force. For problems where it is hard to decipher why changing an input changes the quality (and thus the optimal solution isn&rsquo;t very obvious), these algorithms are extremely useful. Harmony search and its siblings in this category do not guarantee that the globally optimal solution will be found, but often they do find it, and they are often much more efficient than an exhaustive brute force search of all input combinations.</p>

<h2>A Basic Example</h2>

<p>Say I have a killer exam tomorrow, and I have function which represents what mark I&rsquo;ll get depending on how much time I spend studying and how much time I spend sleeping. For the sake of the example, we&rsquo;ll say that I can spend a maximum of 10 hours doing either activity, and any time I don&rsquo;t spend doing either activity will be filled by normal day to day activities. The problem is I&rsquo;ll get burned out if I study too much, but I won&rsquo;t pass if I don&rsquo;t study enough. I could also be groggy during the exam I sleep too much, or be weary and slow if I don&rsquo;t sleep enough. How do I balance the time before the exam appropriately, given that I have this magical function which predicts the future?</p>

<figure class="big">
  <figcaption>The problem space shown as a heat map.</figcaption>
  <div id="sleepMap"></div>
</figure>


<p>To the left is a heat map showing where the best marks are earned. You&rsquo;ll find the hours spent studying on the X axis and the hours spent sleeping on the Y axis, and the mark achieved encoded in the color at that point on the map. A white color represents 100%, and a black color represents a failing grade. You can see that around the edges of the map the colors are darker, indicating a poorer mark. There also appears to be a hotspot right in the middle at about 5 hours spent studying and 8 hours spent sleeping. This is easy for us to see because the data is laid out in such a way we can see the whole problem space at once, and see the exact range of marks earned just by looking at the colors. Us humans can identify a pattern of increasing marks by watching the colors get closer to white as the inputs approach that sweet spot.</p>

<p>The task of an optimization algorithm is to do exactly what we do with our eyes on the heat map. It can also search non differentiable functions, or functions which few assumptions can be made. Also note that this exam example is a tad silly, because every input combination is represented in that heat map, so we could write a brute force program to just try them all and find the max pretty easily and quickly. To make it even worse, the source code for the relatively simple and continuous quality function is also in this page, so just applying some first year calculus we can find the global maximum. For computationally complex functions of many more variables, or non differentiable functions, these brute force and calculus approaches aren&rsquo;t feasible, and we are left to find a better strategy.</p>

<h1 id="harmony_search">Enter Harmony Search</h1>


<p>Harmony search is one such strategy for finding an optimal set of inputs to an often complicated quality function, among others like random search, simulated annealing, genetic algorithms, and tabu search. It works by imitating the activity of musicians while improvising. The choice of which note to play next while playing as part of a trio or quartet is something which takes years to learn to do effectively, because its hard to know what notes your accompaniment might play, and its hard to know what notes might sound good or great in tandem with the others. Musicians can be seen as trying to play some set of notes simultaneously to produce a <em>fantastic harmony</em>, although this is a somewhat naive take on the whole thing, so don&rsquo;t let me ruin the magic for you.</p>

<p>Each musician in the ensemble is often faced with the problem of picking the next note. To do so they can reference their knowledge of the notes in the key they are playing in (what notes sound good in the context of the song), as well as the notes they&rsquo;ve played previously (what notes sound good in the recent context). The notes they played recently most likely sounded alright, so often these are a good choice. Also, it can be wise to pick a particular note that the audience might expect and adjust the pitch of it away from the expected note to create an artistic effect and a new, potentially better, harmony.</p>

<p>These decisions that said bland hypothetical musician makes correspond exactly to how harmony search works. Harmony search seeks an optimal combination of inputs, just as a musician seeks a fantastic harmony. Harmony search generates &ldquo;harmonies&rdquo; of inputs which it then evaluates for quality, and iterates this process until it finds the best one possible. The quality of a musical harmony is analogous to the quality of a particular solution, so you might say that harmony search is trying to achieve a <em>fantastic</em> combination of inputs, or that musicians are trying to <em>optimize</em> the note selection problem using their own heuristics.</p>

<p>Each input to the problem is seen as a different instrument in an ensemble, each potential note one of those instruments could play corresponds to each potential value on of the inputs of the function might adopt. The musical harmony of notes is modeled as a programmatic harmony of values. We evaluate the former&rsquo;s quality using our ears, and the latter&rsquo;s using a quality function describing the problem.</p>

<h2>Improvising New Solutions</h2>

<p>Harmony search continues to use the musician metaphor to iteratively improve its solution. Each search iteration of the algorithm generates a new harmony to evaluate for quality. Using the note selection strategies mentioned previously, notes for each instrument, or values for each input, are selected. These inputs are fed to the quality function to determine the harmony&rsquo;s quality. The notes are selected for each instrument by either randomly selecting a note from the range of playable notes, selecting a note from the set of recently played ones, and/or occasionally adjusting the pitch of a note up or down.</p>

<h2>Getting better</h2>

<p>Each iteration a new harmony is generated, its quality is calculated, and if it makes the cut it&rsquo;s &ldquo;included&rdquo; in the musician&rsquo;s memory. This way, iteration by iteration, old, poor quality harmonies are kicked out and replaced by better ones. The average quality of the set of harmonies in this memory as a whole gradually increases as these new harmonies replace poor ones. The brilliance of the algorithm comes from this: the new harmonies that are generated, which you may recall often reference notes from the memory, start to use notes belonging to known high-quality harmonies. Thus, the newly generated harmonies use good notes, and often have higher qualities because of it. This process repeats, where the increasing the quality of individual harmonies generated increases the average quality of the memory, which increases the quality of the individual generated harmonies, and so on and so forth. At some point (it is hoped), the algorithm generates a harmony which meets the &ldquo;fantastic&rdquo; quality hoped for.</p>

<p>Thats it! Harmony search isn&rsquo;t too complicated, but its a neat algorithm inspired by some everyday natural phenomena. Read on for the code and an example application.</p>

<h1>The Code</h1>

<p>First, lets more formally define some terms.</p>

<ul>
<li><strong>Instrument</strong>: One of the inputs to the quality function.</li>
<li><strong>Note</strong>: One of the possible values of an input.</li>
<li><strong>Harmony</strong>: A combination of each instrument playing a particular note, or in reality the set of chosen inputs for each argument to the quality function.</li>
<li><strong>Quality</strong>: A quantitative measure of a harmony&rsquo;s desirability, how close or far it is from the <em>fantastic</em> harmony, or optimal solution.</li>
<li><strong>Harmony Memory</strong>: The collection of good harmonies, stored in memory for examination by the harmony generation algorithm.</li>
<li><strong>Harmony Memory Consideration</strong>: The process of generating a new harmony using random notes from the harmony memory.</li>
<li><strong>Pitch Adjustment</strong>: The process of moving a particular instrument&rsquo;s note up or down</li>
</ul>


<h2>Pseudo code for the actual algorithm</h2>

<ol>
<li>Initialize the Parameters for Problem and Algorithm.</li>
<li>Initialize the Harmony Memory (HM).</li>
<li>Improvise a New Harmony.</li>
<li>Update the Harmony Memory if the new harmony is better than the worst harmony in the memory.</li>
<li>Check the stopping criterion, and if we can continue, go back to 3.</li>
</ol>


<h2>The Parts</h2>

<p>The algorithm, once applied to a problem, is composed of 3 main parts:</p>

<ol>
<li><strong>The harmony generator</strong>, which spits out new, potentially good harmonies based on the contents of the harmony memory and the set of possible notes</li>
<li><strong>The quality function</strong>, which evaluates a particular harmony for its quality.</li>
<li><strong>The search algorithm</strong>, which moves harmonies in and out of the memory based on their quality.</li>
</ol>


<p>I chose to encapsulate the generator and the search algorithm into a <code>HarmonySearch</code> class, and to make the whole thing reusable by making a <code>Harmony</code> class which in a particular problem would be extended to implement the quality function.</p>

<p>Next, we&rsquo;ll define the formal parameters for the algorithm:</p>

<ul>
<li><strong>Harmony Memory Consideration Rate</strong> or HMCR: the probability that when generating notes for a new harmony, a note from the harmony memory will be picked, instead of just picking a random one out of the possible notes</li>
<li><strong>Pitch Adjustment Rate</strong> or PAR: the probability of randomly shifting a note up or down once it has been chosen</li>
</ul>


<h2>The skeleton</h2>

<p>Here&rsquo;s the skeleton for the <code>HarmonySearch</code> class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">HarmonySearch</span>
</span><span class='line'>  <span class="vi">@defaults:</span>
</span><span class='line'>    <span class="nv">maxTries: </span><span class="mi">100</span>
</span><span class='line'>    <span class="nv">targetQuality: </span><span class="kc">Infinity</span>
</span><span class='line'>    <span class="nv">harmonyMemorySize: </span><span class="kc">false</span>
</span><span class='line'>    <span class="nv">harmonyMemoryConsiderationRate: </span><span class="p">.</span><span class="mi">95</span>
</span><span class='line'>    <span class="nv">pitchAdjustmentRate: </span><span class="p">.</span><span class="mi">1</span>
</span><span class='line'>    <span class="nv">instruments: </span><span class="mi">10</span>
</span><span class='line'>    <span class="nv">notes: </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span> <span class="p">]</span>
</span><span class='line'>    <span class="nv">harmonyMemorySize: </span><span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(options) -&gt;</span>
</span><span class='line'>    <span class="vi">@options = </span><span class="nx">_</span><span class="p">.</span><span class="nx">extend</span> <span class="p">{},</span> <span class="nx">HarmonySearch</span><span class="p">.</span><span class="nx">defaults</span><span class="p">,</span> <span class="nx">options</span>
</span></code></pre></td></tr></table></div></figure>


<p>All this does is define the defaults for the algorithm.</p>

<p>Here&rsquo;s the basic, extendable <code>Harmony</code> class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Harmony</span>
</span><span class='line'>  <span class="c1"># Pull out the note and index of the note from the chord, passed in</span>
</span><span class='line'>  <span class="c1"># in the [[note_1, index_1], [note_2, index_2], ...] format</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(chord) -&gt;</span>
</span><span class='line'>    <span class="vi">@notes = </span><span class="p">[]</span>
</span><span class='line'>    <span class="vi">@noteIndicies = </span><span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">info</span> <span class="k">of</span> <span class="nx">chord</span>
</span><span class='line'>      <span class="nx">@notes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">info</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      <span class="nx">@noteIndicies</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">info</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Cache the quality calculation</span>
</span><span class='line'>  <span class="nv">quality: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@_quality</span> <span class="o">?=</span> <span class="k">this</span><span class="p">.</span><span class="nx">calculateQuality</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@_quality</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">calculateQuality: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">throw</span> <span class="s">&quot;Extend this class to define how a harmony&#39;s quality is evaluated&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above class manages the generic parts of the search. To apply it to a particular optimisation problem, we subclass <code>Harmony</code> and define a quality calculation which suits the problem at hand. Below we&rsquo;ll apply it to the exam mark problem mentioned above, and then after a less trivial sudoku problem.</p>

<h2>The Harmony Generator</h2>

<p>This is the first component of the <code>HarmonySearch</code> class, responsible for spitting out new harmonies based upon those stored in the harmony memory, as well as the HMCR and the PAR.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">HarmonySearch</span>
</span><span class='line'>  <span class="c1"># Generate a totally random harmony</span>
</span><span class='line'>  <span class="nv">getRandomHarmony: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">chord = </span><span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="nx">@options</span><span class="p">.</span><span class="nx">instruments</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="nv">index = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">notesLength</span><span class="p">)</span>
</span><span class='line'>        <span class="p">[</span><span class="nx">@options</span><span class="p">.</span><span class="nx">notes</span><span class="p">[</span><span class="nx">index</span><span class="p">],</span> <span class="nx">index</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">new</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">harmonyClass</span><span class="p">(</span><span class="nx">chord</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Generate a new harmony based on the HMCR and the PAR</span>
</span><span class='line'>  <span class="nv">getNextHarmony: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">chord = </span><span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="nx">@options</span><span class="p">.</span><span class="nx">instruments</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&lt;</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">harmonyMemoryConsiderationRate</span>
</span><span class='line'>        <span class="c1"># Consider HM. Pick a random harmony, and sample the note at this position in the chord</span>
</span><span class='line'>        <span class="nv">harmonyMemoryIndex = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nx">@options</span><span class="p">.</span><span class="nx">harmonyMemorySize</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">note = </span><span class="nx">@harmonyMemory</span><span class="p">[</span><span class="nx">harmonyMemoryIndex</span><span class="p">].</span><span class="nx">notes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="c1"># Grab note for this instrument</span>
</span><span class='line'>        <span class="nv">noteIndex = </span><span class="nx">@harmonyMemory</span><span class="p">[</span><span class="nx">harmonyMemoryIndex</span><span class="p">].</span><span class="nx">noteIndicies</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Do pitch adjustment</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&lt;</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">pitchAdjustmentRate</span>
</span><span class='line'>          <span class="c1"># Adjust the pitch up or down one</span>
</span><span class='line'>          <span class="nv">adjustment = </span><span class="k">if</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="k">then</span> <span class="mi">1</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>          <span class="nv">noteIndex = </span><span class="p">(</span><span class="nx">noteIndex</span> <span class="o">+</span> <span class="nx">adjustment</span> <span class="o">+</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">notesLength</span><span class="p">)</span> <span class="o">%</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">notesLength</span>
</span><span class='line'>          <span class="nv">note = </span><span class="nx">@options</span><span class="p">.</span><span class="nx">notes</span><span class="p">[</span><span class="nx">noteIndex</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c1"># Don&#39;t consider the HM. Pick a random note from all possible values.</span>
</span><span class='line'>        <span class="nv">noteIndex = </span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">notesLength</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">note = </span><span class="nx">@options</span><span class="p">.</span><span class="nx">notes</span><span class="p">[</span><span class="nx">noteIndex</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Return chosen note for the chord</span>
</span><span class='line'>      <span class="p">[</span><span class="nx">note</span><span class="p">,</span> <span class="nx">noteIndex</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">new</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">harmonyClass</span><span class="p">(</span><span class="nx">chord</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully all this secondary stuff isn&rsquo;t too confusing, but if it is, the next section brings it all together and hopefully will make it all clear.</p>

<p>Also note that each <code>Harmony</code> class stores both an array of notes and an array of note indices, which seems a tad odd. This is because in the above code the pitch adjustment portion needs access to the original index of the note in the array of possible notes, so it can find the next or previous index to adjust to. Thats why the <code>Harmony</code> class constructor accepts the <code>[[note, index], [note2, index2], ...]</code> style arguments, and the above accumulator returns <code>[note, noteIndex]</code>, instead of just doing arrays of notes.</p>

<h2>The Core</h2>

<p>Below is the core of the search algorithm, which actually executes the whole search process by generating new harmonies and moving them into the harmony memory if they are better than the current worst.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">HarmonySearch</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">search: </span><span class="nf">(callback) -&gt;</span>
</span><span class='line'>    <span class="c1"># Initialize harmony memory</span>
</span><span class='line'>    <span class="vi">@running = </span><span class="kc">true</span>
</span><span class='line'>    <span class="vi">@harmonyMemory = </span><span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">..</span><span class="nx">@options</span><span class="p">.</span><span class="nx">harmonyMemorySize</span><span class="p">]</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">getRandomHarmony</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Initialize tracker variables for the loop</span>
</span><span class='line'>    <span class="vi">@tries = </span><span class="mi">0</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">worstQuality</span><span class="p">,</span> <span class="nx">worstIndex</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getWorst</span><span class="p">()</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">bestQuality</span><span class="p">,</span> <span class="nx">bestIndex</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getBest</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Iterate over the search until either the target quality is hit,</span>
</span><span class='line'>    <span class="c1"># or the max iterations condition is passed.</span>
</span><span class='line'>    <span class="k">while</span> <span class="kc">true</span>
</span><span class='line'>      <span class="nx">@tries</span><span class="o">++</span> <span class="c1"># Increment tries counter each loop for end condition check</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Check end condition</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">@tries</span> <span class="o">&gt;</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">maxTries</span> <span class="o">||</span> <span class="nx">bestQuality</span> <span class="o">&gt;=</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">targetQuality</span>
</span><span class='line'>        <span class="k">break</span> <span class="c1"># We either found it or exhausted the alloted time</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Otherwise, generate another harmony</span>
</span><span class='line'>      <span class="nv">harmony = </span><span class="k">this</span><span class="p">.</span><span class="nx">getNextHarmony</span><span class="p">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">harmony</span><span class="p">.</span><span class="nx">quality</span><span class="p">()</span> <span class="o">&gt;</span> <span class="nx">worstQuality</span>
</span><span class='line'>        <span class="c1"># Better than worst harmony. Add this harmony to the memory and delete the worst.</span>
</span><span class='line'>        <span class="nx">@harmonyMemory</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">harmony</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">@harmonyMemory</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">worstIndex</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># Javascript for Array#delete</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Update the worst quality for the next loop iteration</span>
</span><span class='line'>        <span class="p">[</span><span class="nx">worstQuality</span><span class="p">,</span> <span class="nx">worstIndex</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getWorst</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Track the best quality to see if we&#39;ve met the target quality</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">harmony</span><span class="p">.</span><span class="nx">quality</span><span class="p">()</span> <span class="o">&gt;</span> <span class="nx">bestQuality</span>
</span><span class='line'>          <span class="nv">bestQuality = </span><span class="nx">harmony</span><span class="p">.</span><span class="nx">quality</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nx">bestQuality</span><span class="p">,</span> <span class="nx">bestIndex</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getBest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">@harmonyMemory</span><span class="p">[</span><span class="nx">bestIndex</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats about it! Feeling ok? Read on for a couple examples to gel all of this.</p>

<h1 id="exam_example">Exam Mark Example</h1>


<p>Consider the exam mark problem shown above. Suppose the mysterious exam mark equation has been implemented in a Javascript function called <code>Exam.mark(timeSleeping, timeStudying)</code>.</p>

<pre><code>:::coffeescript
$ Exam.mark
# =&gt; function(timeSleeping, timeStudying) { ... }
$ Exam.mark(0, 0)
# =&gt; 30
$ Exam.mark(10,10)
# =&gt; 50
</code></pre>

<p>We&rsquo;re trying to find the global optimum to this equation. To model this in harmony search, we ask how many instruments there are, what notes each of them can play, and how to determine the quality of the harmony produced.</p>

<p>In this case, the <code>Exam.mark</code> equation is the one we are trying to optimize. We model its input arguments as notes, and use harmonies composed of different combinations of times. There are two instruments, one for each argument to the function, and each instrument can &ldquo;play&rdquo; any number between 0 and 10, which are the bounds as outlined in the problem. A harmony&rsquo;s quality is the mark achieved when the time is spent in it&rsquo;s particular allotment, which we model as the evaluation of the <code>Exam.mark</code> function for the two notes.</p>

<p>The harmony class we&rsquo;d use for this problem would look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>    <span class="k">class</span> <span class="nx">ExamHarmony</span> <span class="k">extends</span> <span class="nx">Harmony</span>
</span><span class='line'>      <span class="nv">quality: </span><span class="nf">-&gt;</span> <span class="nx">Exam</span><span class="p">.</span><span class="nx">mark</span><span class="p">(</span><span class="nx">@notes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">@notes</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s not so bad right? We&rsquo;d then run the search for some sufficiently large number of iterations and look at the output.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">search = </span><span class="k">new</span> <span class="nx">HarmonySearch</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">harmonyClass: </span><span class="nx">ExamHarmony</span>
</span><span class='line'>  <span class="nv">notes: </span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">instruments: </span><span class="mi">2</span>
</span><span class='line'>  <span class="nv">targetQuality: </span><span class="mi">100</span>
</span><span class='line'>  <span class="nv">maxIterations: </span><span class="mi">2000</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">results = </span><span class="nx">search</span><span class="p">.</span><span class="nx">search</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this, results should hold the best quality <code>Harmony</code> found.</p>

<h2>Demo</h2>

<div id="examsearchVis"></div>


<p>Harmony Search is run live to power the visualization above, as well as the one at the top of the page. Each wedge in the purple circle represents a harmony in the memory, and so the circle is the whole HM. Each wedge is labeled by its quality, and as harmonies grow closer to the target quality, the color of their wedges grow more purple. The best and worst harmonies are are also highlighted using a green or red border. Feel free to click on a harmony to see it&rsquo;s location on the heat map, and judge how close it is to the optimal point. Also, notice how new harmonies are added at the top of the circle and progress clockwise as new ones are added and poor ones are removed. The best harmonies will travel all the way around the circle but not get bumped out, and end up at the back for a long period of time, contributing good quality notes to the new harmonies being generated.</p>

<p>The grid of numbers to the right represents the selection of the notes in each new harmony. The harmony at the top of the list (with all the lines stemming from it) is the most recent addition to the harmony memory, and each line below is a progressively older harmony in the memory. Each note in the 1st row is generated either by picking a note from the set of those previously chosen in the memory, or by picking one randomly from the set of possible notes. Those chosen from the memory are signified by a grey line pointing towards the harmony from which the note was chosen. If pitch adjustment is applied, the line becomes blue. Otherwise, the note is chosen randomly, which is signified by a purple line pointing upwards into the set of notes possible for each note in the harmony. You&rsquo;ll only notice this in the Sudoku demo above, because there isn&rsquo;t enough room to show all the possibilities with the exam example.</p>

<h1 id="sudoku_example">Sudoku Example</h1>


<p>Harmony search can be applied to more complex problems than simple functions like the above. Sudoku is a specific case of the graph coloring problem, one of <a href="http://en.wikipedia.org/wiki/Karp%E2%80%99s_21_NP-complete_problems">Karp&rsquo;s 21 NP-complete problems</a>. In other words, its very time consuming to brute force the solution to a sudoku by just trying random numbers and seeing if they work. There are excellent algorithms that often run faster than harmony search or any of its metaheuristic brethren which solve the sudoku using intelligent, problem aware methods and guess when needed.</p>

<p>These &ldquo;smart&rdquo; solvers are I&rsquo;m sure the algorithms employed by true Sudoku software, but they rely on intimate knowledge of the Sudoku solving process and an understanding of the techniques used. We have to encode our knowledge of how to solve sudokus into a program, implementing the guessing feature, the backtracking, and all the methods for eliminating possibilities for a particular cell. Instead of developing an algorithm like this, we can use a search method to find us a solution as long as we have a heuristic to tell the quality of a given solution. By solving them in this way, we don&rsquo;t need to concern ourselves with finding a general method or exploring edge cases or algorithmic nuances, and we let the search algorithm figure these things out on its own. We are able to lift the burden of understanding the relationship between the input variables from our own shoulders, and instead allow the algorithm to explore these relationships itself.</p>

<p>Hopefully you can see the advantage of using a search algorithm for problems where the smart, human written implementation is hard or impossible to create. If we have some measure of quality for a solution, and thus a way to tell when a solution is optimal, we can let the search algorithm, well, search.</p>

<h2>The Sudoku Model</h2>

<p>Let&rsquo;s solve a particular Sudoku puzzle using harmony search. First, let us identify what the notes of a harmony are, and after, how to calculate the quality of one.</p>

<p>First off, notice that for any solution to be considered as such, each cell must have a value. Some of the values are given by the puzzle, and some must be decided by us. We seek a choice for each cell such that there are no conflicts, or in other words, the optimal solution to a sudoku is one which has all the cells filled in and breaks no rules.</p>

<p>We model the value of each one of the unknown cells as one note in a harmony, with the note&rsquo;s value being an integer between 1 and 9. The harmony is the chord struck when we insert each of these choices into the puzzle, and the quality of the solution is how close to a valid filled-in puzzle this solution is. The order the array of notes is entered into the puzzle doesn&rsquo;t really matter all that much, as long as it is consistent the algorithm will work just the same. The number of instruments is the count of unsolved cells.</p>

<figure><table class="sudoku_game"><tr><td class="violated">2</td><td class="fixed">5</td><td class="good">4</td><td class="fixed">3</td><td class="boring">1</td><td class="fixed">6</td><td class="good">8</td><td class="boring">9</td><td class="fixed">7</td></tr><tr><td class="good">7</td><td class="violated">6</td><td class="good">3</td><td class="good">9</td><td class="fixed">8</td><td class="fixed">5</td><td class="boring">1</td><td class="fixed">2</td><td class="fixed">4</td></tr><tr><td class="good">1</td><td class="fixed">9</td><td class="fixed">8</td><td class="fixed">4</td><td class="fixed">2</td><td class="good">7</td><td class="fixed">6</td><td class="boring">5</td><td class="fixed">3</td></tr><tr><td class="fixed">9</td><td class="good">8</td><td class="fixed">1</td><td class="violated">7</td><td class="violated">5</td><td class="fixed">3</td><td class="fixed">2</td><td class="violated">5</td><td class="fixed">6</td></tr><tr><td class="violated">2</td><td class="fixed">3</td><td class="violated">2</td><td class="violated">7</td><td class="good">4</td><td class="violated">8</td><td class="violated">7</td><td class="fixed">1</td><td class="boring">5</td></tr><tr><td class="fixed">5</td><td class="boring">4</td><td class="fixed">7</td><td class="fixed">2</td><td class="fixed">6</td><td class="boring">1</td><td class="fixed">9</td><td class="good">3</td><td class="fixed">8</td></tr><tr><td class="fixed">4</td><td class="violated">6</td><td class="fixed">5</td><td class="boring">6</td><td class="fixed">9</td><td class="boring">2</td><td class="fixed">3</td><td class="fixed">8</td><td class="boring">1</td></tr><tr><td class="good">3</td><td class="fixed">1</td><td class="violated">6</td><td class="fixed">5</td><td class="fixed">7</td><td class="boring">8</td><td class="boring">4</td><td class="violated">9</td><td class="fixed">2</td></tr><tr><td class="fixed">8</td><td class="good">2</td><td class="violated">6</td><td class="fixed">1</td><td class="boring">3</td><td class="fixed">4</td><td class="boring">5</td><td class="fixed">7</td><td class="violated">9</td></tr></table><figcaption>A sudoku puzzle in the process of being solved.</figcaption></figure>


<p>To the left is an example solution proposed in an early iteration of harmony search.</p>

<p> <ul class="sudoku_legend"><li><span class="good">Green</span> cells don&rsquo;t violate any rules</li><li><span class="violated">Red</span> cells violate either row, column, or block rules</li><li><span class="boring">Grey</span> cells have only one possible value based on the clues</li><li><span class="clue">White</span> cells are given in the puzzle (a &ldquo;clue&rdquo; cell)</li></ul></p>

<p>The green, grey, and red cells represent the choices for all of the unknown cells.</p>

<p>Next, we decide how to evaluate the quality of a given solution. The most obvious algorithm is just a count of the violations in the puzzle, which is just a count of the red cells in the solution. In my tests this heuristic worked a tad less effectively than a slightly different heuristic proposed by Dr Zong Woo Geem in [1]. The optimal solution is the global minimum of \( Q\), where</p>

<div class="math">
  $$
  Q = \sum\limits_{i = 1}^9 \left| \sum\limits_{j = 1}^9  S_{i,j}  - 45 \right|
  + \sum\limits_{j = 1}^9 \left| \sum\limits_{i = 1}^9  S_{i,j}  - 45 \right|
  + \sum\limits_{k = 1}^9 \left| \sum_{ (i,j) \in B_k}  S_{i,j}  - 45 \right|
  $$

  where \( S_{i,j} \) is the cell \( i\) spaces over from the left and \( j\) spaces down from the top, and  \( B_k \) is all the cells in the k<sup>th</sup> box.
</div>


<p><br/>
The above heuristic gives a more detailed measure of a solutions quality. It works by taking the sum of each row and subtracting 45, which is the sum of the numbers from 1 to 9. If a particular row has two 1s instead of a 1 and a 2, the sum of the numbers in the row won&rsquo;t be 45, and \( Q \) won&rsquo;t be minimal. A correct solution for a sudoku would have \( Q = 0 \). As noted in [1], its important to see that the sum of a row may be 45 even though the numbers in it are not exactly the set from 1 to 9. The numbers in a row might just happen to sum to 45, for example \( sum\ \{ 1,2,2,5,5,6,7,8,9 \} = 45 \). However, if this case occurs in one row, then the sum for the columns passing through the row, or the sum for one of the boxes containing the row won&rsquo;t be 45, moving the final value of \( Q \) away from 0, and thus denoting a sub optimal quality as desired. The only way to get a row, column, and box sum of 45 is to have precisely the set from 1 - 9 in each container.</p>

<p>In summary, the notes for a harmony are the set of values for the unknown cells, and the quality of the harmony is the evaluation of the function \( Q \) on the generated sudoku puzzle. With these two decisions made, we can now use harmony search to find a solution (if one exists) to a given sudoku puzzle.</p>

<h2>Code</h2>

<p>The code for the sudoku example is boring and unfortunately long, but you can see it on Github if you&rsquo;d like. The same <code>HarmonySearch</code> class as defined above would be used to search the problem space, and a harmony&rsquo;s quality would be calculated using the \( Q \) function above.</p>

<p>Also, a quick side note: the <code>HarmonySearch</code> class tries to <em>maximize</em> a given quality, whereas \( Q \) gets <em>smaller</em> as the input approaches a valid solution. Because of this, I used \( 135 - Q \) instead of just \( Q \) to calculate the quality of a harmony. As \( Q \) gets smaller, the quality of a harmony approaches 135, which we then define as the target quality.</p>

<h2>Discussion</h2>

<p>The demo at the very top of the page implements Harmony Search in an attempt to solve a sudoku. I tried quite hard to achieve similar results to those to Geem&rsquo;s [1], but I was downright stumped. Geem managed to solve the default sudoku (the one called &lsquo;geem&rsquo; in my simulation) in &ldquo;285 improvisations&rdquo;, which to me is just absurdly low. It takes my implementation anywhere from 5000 to 50000 improvisations to find a valid solution, which is an awful lot more than 285. So I think I either made a serious mistake when implementing, a serious mistake when interpreting Geem&rsquo;s results, or discovered some academic fraud. I trust the inventor of the algorithm to be better at implementing it than I am, so I am pretty sure I made a blunder at some point or another.</p>

<p><strong>Update Sept 28th 2015</strong>: Turns out that it may have indeed been academic fraud! Dennis Weyland has published some results which match mine here and contradict those in the original paper concerning Harmony Search&rsquo;s efficency and novelty. A sad jazz trombone to you, Mr Geem. See them here: <a href="http://www.dennisweyland.net/blog/?p=12">http://www.dennisweyland.net/blog/?p=12</a> , and thanks Dennis!</p>

<p>The puzzle in question has 41 unsolved cells, giving a search space with 9<sup>41</sup> different solutions. That number has 40 digits. Its big. It&rsquo;s big enough that finding a solution after only 235 tries is really, really impressive. In an attempt to get my numbers down to at least the same order of magnitude, I tried precomputing the possible choices for each cell instead of letting each one be any number from 1 to 9. This is silly because it shows we don&rsquo;t need to use HS to solve this problem at all, because the algorithm to determine the possible choices for each cell is one that we could use to just solve the puzzle. If we can get the possible choices for a cell using some algorithm, we can just pick one choice, see if the solution works,and if not, pick the next choice, and repeat. We are implementing only the first step of the smart solving algorithm in order to make the dumb one just a tad smarter. If its possible for us to come up with an algorithm which can solve a sudoku deterministically instead of using a heuristic to search, we should most probably take the former approach.</p>

<p>In any case, adding in this precomputation step got the numbers down as expected because it drastically reduces the size of the search space, but still no where close to Geems. I don&rsquo;t know why this is the case, and I&rsquo;ve spent an obscene amount of time trying to figure it out, but alas, I have been unable. If you can figure it out by looking at the code or just based on my (perhaps incorrect) description of the algorithm, do tell me so I can put this to rest.</p>

<p>Lastly, the above issues demonstrate that sudoku isn&rsquo;t really that good an example for a metaheuristic algorithms. We know that there are more efficient algorithms which solve them in itty bitty tiny amount of time, and unfortunately this solver algorithm isn&rsquo;t really that far from the quality heuristic we already have to write for HS. I also included no real strategy for dealing with unsolvable sudokus, which is a whole other class of <a href="http://en.wikipedia.org/wiki/Halting_problem">problem</a>. Shame on me for not dealing with these, but with this class of algorithm in particular its extraordinarily difficult. When using HS, there is no way to know if a solution exists or not until all possible harmonies have been tried. This brute force search is what we&rsquo;re trying to avoid by using a heuristic search. If our tries count reaches some user-defined ceiling, which is the stopping condition used in these demos, we wont know if a solution wasn&rsquo;t found because it doesn&rsquo;t exist, or because we just haven&rsquo;t waited long enough. Since it&rsquo;s so hard to know, we ask the algorithm to stop once its tried 10000000 harmonies, and assume that the solution doesn&rsquo;t exist, even though the optimal solution could be the 10000001st harmony tried.</p>

<h1>Conclusion</h1>

<p>Hopefully this has been an exciting journey through the world of metaheuristic optimisation algorithms, and you learned a thing or two. I sure did. The takeaways are:</p>

<ul>
<li>Metaheuristic optimisation algorithms are useful for finding the optimal solution to some function which describes its arguments' &ldquo;quality&rdquo; or &ldquo;fitness&rdquo;.</li>
<li>Harmony search is a neat example of these algorithms which attempts to optimize a solution based on the principles of jazz musicians</li>
<li>HS and company are applicable to a very wide range of problems, including solving puzzles like sudoku.</li>
<li>Sudoku however isn&rsquo;t really a good testbed for these algorithms because its easy enough to write a solving algorithm, and you have to write most of that algorithm to apply HS to sudoku anyways.</li>
</ul>


<p>Thanks for reading!</p>

<h3>References</h3>

<ol>
<li>Geem, Z.W.: Harmony Search Algorithm for Solving Sudoku. Knowledge-Based Intelligent Information and Engineering Systems. <a href="http://dx.doi.org/10.1007/978-3-540-74819-9_46">http://dx.doi.org/10.1007/978-3-540-74819-9_46</a></li>
</ol>


<h3>Thanks</h3>

<p>  Thanks to <a href="http://fustat.org/">Mo</a> and Tomas for helping edit. Thanks to Dr Geem for creating and publishing so much about the algorithm. Thanks to the authors of <a href="http://vis.stanford.edu/protovis/">Protovis</a> and <a href="http://www.mathjax.org/">Mathjax</a> for superb code which made the visualizations and formulas on this page look great.</p>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX", "output/HTML-CSS"],
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
      processEscapes: true
    },
    "HTML-CSS": {
      availableFonts: ["TeX"],
      webFont: "TeX",
      imageFont: null
    },
    TeX: {
      extensions: ["AMSmath.js","AMSsymbols.js","noErrors.js","noUndefined.js"]
    }
  });
</script>




<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/1.1-latest/MathJax.js"></script>


<script src="http://harry.me/assets/harmonics/sudoku-0cb71f33ccb3cbac17f7fe18585c7ddb.js"></script>


<p><link href='http://harry.me/stylesheets/harmonics.css' rel='stylesheet' type='text/css' /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting from Jasmine to QUnit]]></title>
    <link href="http://harry.me/blog/2011/05/11/converting-from-jasmine-to-qunit/"/>
    <updated>2011-05-11T12:41:00-04:00</updated>
    <id>http://harry.me/blog/2011/05/11/converting-from-jasmine-to-qunit</id>
    <content type="html"><![CDATA[<p>I had to convert a sizeable test suite from <a href="https://github.com/pivotal/jasmine/wiki">Jasmine</a> to <a href="http://docs.jquery.com/QUnit">QUnit</a>. The former has a wide array of matchers and situation specific helpers for explicitly testing things, and the latter is about as barebones as it gets. This is all well and good, it just means converting is a pain.</p>

<!--more-->


<p>First, here are some regexes to help. These are vim substitution commands, but you should be able to adapt them for any editor with a regex find &amp; replace. Also, these were written for Coffeescript code which had some optional brackets here and there, so YMMV, but hopefully they are useful.</p>

<pre><code>%s/\vdescribe "(.+)", \-\&gt;/module "\1"/
%s/\vit "/test "/
%s/\vexpect\((.+)\)\.toEqual\(?(.+)\)?/equals \1, \2/
%s/\vexpect\((.+)\)\.toBeTruthy\(\)/ok \1/
%s/\vjasmine\.createSpy/createSpy/
%s/\vexpect\((.+)\).toHaveBeenCalledWith\((.+)\)/deepEqual \1.lastCallArguments, [\2]/
%s\vbeforeEach \-\&gt;/setup: -&gt;/
</code></pre>

<p>We change <code>describe</code> calls to <code>module</code>, <code>it "..."</code> to <code>test "..."</code>, some basic expectations from Jasmine to the equivalents in QUnit, and then the <code>beforeEach</code> calls from Jasmine to <code>setup</code> options for the <code>module call</code>. This got me most of the way there, after running them I had to fix the indentation, ensure the <code>setup:</code> stuff was passed as an option to <code>module</code> (it was a function call before), and fix some brackets here and there. If you come up with more or better regexes please leave a comment and I&rsquo;ll add them to the post!</p>

<p>Next, I ripped out a very simple version of the <a href="https://github.com/pivotal/jasmine/wiki/Spies"><code>jasmine.Spy</code></a> object which I started to really miss in QUnit. This is my super basic copy of the Jasmine implementation, suitable for both command line execution through <a href="https://github.com/kof/node-qunit">node-qunit</a> or the in browser test runner.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">exports = </span><span class="k">if</span> <span class="nb">window</span><span class="o">?</span> <span class="k">then</span> <span class="nb">window</span> <span class="k">else</span> <span class="nx">global</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">Spy</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(original) -&gt;</span>
</span><span class='line'>    <span class="vi">@called = </span><span class="kc">false</span>
</span><span class='line'>    <span class="vi">@callCount = </span><span class="mi">0</span>
</span><span class='line'>    <span class="vi">@calls = </span><span class="p">[]</span>
</span><span class='line'>    <span class="vi">@original = </span><span class="nx">original</span>
</span><span class='line'>    <span class="vi">@fixedReturn = </span><span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">whichReturns: </span><span class="nf">(value) -&gt;</span>
</span><span class='line'>    <span class="vi">@fixedReturn = </span><span class="kc">true</span>
</span><span class='line'>    <span class="vi">@fixedReturnValue = </span><span class="nx">value</span>
</span><span class='line'>    <span class="nx">@</span>
</span><span class='line'>
</span><span class='line'><span class="nv">createSpy = </span><span class="nf">(original) -&gt;</span>
</span><span class='line'>  <span class="nv">spy = </span><span class="k">new</span> <span class="nx">Spy</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">f = </span><span class="nf">(args...) -&gt;</span>
</span><span class='line'>    <span class="nv">f.called = </span><span class="kc">true</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">.</span><span class="nx">callCount</span><span class="o">++</span>
</span><span class='line'>    <span class="nv">f.lastCall =</span>
</span><span class='line'>      <span class="nv">object: </span><span class="k">this</span>
</span><span class='line'>      <span class="nv">arguments: </span><span class="nx">args</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">f.lastCallArguments = </span><span class="nx">f</span><span class="p">.</span><span class="nx">lastCall</span><span class="p">.</span><span class="nx">arguments</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">.</span><span class="nx">calls</span><span class="p">.</span><span class="nx">push</span> <span class="nx">f</span><span class="p">.</span><span class="nx">lastCall</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">unless</span> <span class="nx">f</span><span class="p">.</span><span class="nx">fixedReturn</span>
</span><span class='line'>      <span class="nx">f</span><span class="p">.</span><span class="nx">original</span><span class="o">?</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">...)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">f</span><span class="p">.</span><span class="nx">fixedReturnValue</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">spy</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">v</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">f</span>
</span><span class='line'>
</span><span class='line'><span class="nv">spyOn = </span><span class="nf">(obj, method) -&gt;</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">[</span><span class="nx">method</span><span class="p">]</span> <span class="o">=</span> <span class="nx">createSpy</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">method</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nv">exports.createSpy = </span><span class="nx">createSpy</span>
</span><span class='line'><span class="nv">exports.spyOn = </span><span class="nx">spyOn</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully this will be of use to you if you end up doing anything similar! I have this here mostly for future reference but I hope it helps at least one of you tube surfers out there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Neat Algorithms - Flocking]]></title>
    <link href="http://harry.me/blog/2011/02/17/neat-algorithms-flocking/"/>
    <updated>2011-02-17T12:41:00-05:00</updated>
    <id>http://harry.me/blog/2011/02/17/neat-algorithms-flocking</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll explain and demonstrate an algorithm that simulates a group of entities grouping together, illustrating something called &ldquo;flocking&rdquo;. I think it&rsquo;s quite neat because the flock exhibits some complex collective intelligence when just a few simple governing rules are applied to each entity.</p>

<!--more-->


<p>The <a href="http://www.red3d.com/cwr/boids/">original flocking algorithm</a> was developed by <a href="http://www.red3d.com/cwr/index.html">Craig Reynolds</a> in 1986, and has some super cool real world applications:</p>

<ul>
<li>Computer animation. <a href="http://www.imdb.com/title/tt0103776/awards" title="Batman Returns (1992) Awards list">Batman Returns (1992)</a> is widely quoted as having been nominated for an Oscar for its bat swarms which were procedurally generated using algorithms similar to these.</li>
<li>Social network simulation and modeling opinion flow. After choosing humans as the entities in the flock, the overall direction of the flock can be estimated using the rules that apply to the simple flock model, and people&rsquo;s future opinions can be predicted. See <a href="http://www.gamasutra.com/view/feature/1815/modeling_opinion_flow_in_humans_.php" title="Modeling opinion flow using Boid algorithms at Gamasutra">Gamasutra</a>&rsquo;s stupendous article on the subject.</li>
<li>Aerospace engineering. By sending <a href="http://en.wikipedia.org/wiki/Unmanned_aerial_vehicle">UAV</a>s on missions in flocks they are able to more effectively complete their missions and react to enemy events. See <a href="http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=1470734" title="Paper from the ACC in 2005 describing the performance of UAV flock missions">one paper</a> and <a href="http://ieeexplore.ieee.org/Xplore/login.jsp?url=http://ieeexplore.ieee.org/iel5/5351161/5356514/05356552.pdf%3Farnumber%3D5356552&amp;authDecision=-203" title="Paper from the ACC in 2005 describing the performance of UAV flock missions">another</a> on the subject.</li>
<li>Distributed systems analysis, search, and optimization. By modeling things like spacial data, network traffic, or solutions to an optimization problem as entities, the direction of the flock can be used to find <a href="http://www.springerlink.com/content/c7t0fb6a54flkrw8/" title="Paper on performant parallel spacial clustering from 2002">clusters</a>, where to push traffic, or <a href="http://www.engr.iupui.edu/~shi/pso.html" title="Page on particle swarm optimization with references.">optimal solutions</a>.</li>
</ul>


<p>Here&rsquo;s the full algorithm in action:</p>

<div class="flock" id="prettyDemo"></div>


<p>You can also turn on a legend and a magnified view of one boid: <button class="awesome" id="decorateDemo">Decorate</button></p>

<h2>How it Works</h2>

<p>Each entity on the map, which we&rsquo;ll now refer to as a &ldquo;boid&rdquo;, moves around while being governed by a few simple rules. Each boid starts out at the center of the map with a random velocity, and for each frame of the simulation, a new velocity is calculated using the flocking algorithm. For each boid, the algorithm uses the boid&rsquo;s current velocity, its neighbours' velocities, and its position relative to its neighbours to calculate this new velocity. There are three components to it: the <em>alignment</em>, the <em>cohesion</em>, and the <em>separation</em>, which when used in combination display the full blown flocking behaviour.</p>

<h2>About this page</h2>

<p>At any time you can click on any of the demos to stop or start the boid&rsquo;s movement. The lower ones also have buttons allowing you to control the speed at which the boids move. When the movement is stopped you can hover your mouse over a boid to inspect the components of its velocity, as generated by the flocking algorithm. The boids also have an elephantine weakness: they are afraid of mice. Feel free to perturb the flock using your mouse while the boids are moving, and watch them try and regroup.</p>

<p>All the demos are running the same algorithm, just with random start positions and random start velocities. The code running the demos as well as the example code on the page is done in <a href="http://coffeescript.org/">Coffeescript</a>. If you haven&rsquo;t seen it before, it shouldn&rsquo;t be too hard to pick up, but visit that page if you want a quick primer on the syntax. Also, the example code on this page is the distilled version of the running code, algorithmically complete but missing a lot of the boring nuances arising from actual implementation, such as a lot of the code to render the boids, wrap them around the edges of the map, and display the indicators. The code running the actual demos can be found <a href="https://github.com/hornairs/blog/tree/master/assets/coffeescripts/flocking">here</a>, and isn&rsquo;t really all that interesting.</p>

<h3>The code &amp; components</h3>

<p>Heres the essence of the Coffeescript class modeling the boid. Each boid has a <code>location</code> and a <code>velocity</code>, which are represented as <code>Vector</code> objects (<a href="https://github.com/hornairs/blog/blob/master/assets/coffeescripts/flocking/vector.coffee">source</a>). Each frame calls the <code>step</code> method on each boid, which calculates an acceleration based on the 3 components. This acceleration is added to the velocity, which is then limited to a maxmium magnitude so the boid can&rsquo;t go too fast. The new velocity is added to the location to translate the boid on the map.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Ported almost directly from http://processingjs.org/learning/topic/flocking</span>
</span><span class='line'><span class="c1"># thanks a whole lot to Craig Reynolds and Daniel Shiffman</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">Boid</span>
</span><span class='line'>  <span class="nv">location: </span><span class="kc">false</span>
</span><span class='line'>  <span class="nv">velocity: </span><span class="kc">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(loc, processing) -&gt;</span>
</span><span class='line'>    <span class="vi">@velocity = </span><span class="k">new</span> <span class="nx">Vector</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@location = </span><span class="nx">loc</span><span class="p">.</span><span class="nx">copy</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@p = </span><span class="nx">processing</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Called every frame. Calculates the acceleration using the flock method,</span>
</span><span class='line'>  <span class="c1"># and moves the boid based on it.</span>
</span><span class='line'>  <span class="nv">step: </span><span class="nf">(neighbours) -&gt;</span>
</span><span class='line'>    <span class="nv">acceleration = </span><span class="k">this</span><span class="p">.</span><span class="nx">flock</span><span class="p">(</span><span class="nx">neighbours</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Limit the maximum speed at which a boid can go</span>
</span><span class='line'>    <span class="nx">@velocity</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">acceleration</span><span class="p">).</span><span class="nx">limit</span><span class="p">(</span><span class="nx">MAX_SPEED</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@location</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">@velocity</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_wrapIfNeeded</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Implements the flocking algorthim by collecting the three components</span>
</span><span class='line'>  <span class="c1"># and returning a weighted sum.</span>
</span><span class='line'>  <span class="nv">flock: </span><span class="nf">(neighbours) -&gt;</span>
</span><span class='line'>    <span class="nv">separation = </span><span class="k">this</span><span class="p">.</span><span class="nx">separate</span><span class="p">(</span><span class="nx">neighbours</span><span class="p">).</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">SEPARATION_WEIGHT</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">alignment = </span><span class="k">this</span><span class="p">.</span><span class="nx">align</span><span class="p">(</span><span class="nx">neighbours</span><span class="p">).</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">ALIGNMENT_WEIGHT</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">cohesion = </span><span class="k">this</span><span class="p">.</span><span class="nx">cohere</span><span class="p">(</span><span class="nx">neighbours</span><span class="p">).</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">COHESION_WEIGHT</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">separation</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">alignment</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">cohesion</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up is the three components which generate the acceleration.</p>

<h3>Cohesion</h3>

<div class="flock" id="cohesionDemo"></div>


<p>A flock is defined as a group of boids all staying close to each together, and the <em>cohesion</em> component of the algorithm is mainly responsible for the togetherness aspect of this. Every frame, each boid looks at the position of each other boid to see if it is within a specified <code>NEIGHBOUR_RADIUS</code>, that is, it checks to see which other boids are close enough to be considered flockmates. The positions of the qualifying neighbours are averaged and the boid steers to towards that position. This way, each boid is trying to steer towards the center of the flock, resulting in them all staying close together.</p>

<p>The example on the right shows how the cohesion component of the algorithm works. The pink boid&rsquo;s <code>NEIGHBOUR_RADIUS</code> is drawn as the green circle around it, and boids inside it (neighbours) are drawn as green instead of blue when they are inside it. Their locations (the dark purple vectors) are summed up to find the center of the flock. The light pink vector points to this center point which the pink boid is trying to reach. The blue vector shows the path by which the boid steers towards this center point. This steering vector looks a tad odd, but have a look at the code to see why it is necessary.</p>

<p>Also note that if a boid has only one neighbour, the center of its neighbouring flock is exactly its neighbour&rsquo;s location. In this case the dark purple vector has a zero magnitude (it starts and ends at the same point), and the light purple vector points to the position of that neighbour.</p>

<h4>Code</h4>

<p>The cohesion component is calculated by averaging the location of all the neighbours within the <code>NEIGHBOUR_RADIUS</code>. Note that the returned value is the result of calling <code>steer_to</code> on the average position. The <code>steer_to</code> method implements some basic easing towards a target so the boids turn towards fellow flock members at reasonable speeds instead of instantly switching direction. You can also see this as an implementation of friction and reaction speeds.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Boid</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Called to get the cohesion component of the acceleration</span>
</span><span class='line'>  <span class="nv">cohere: </span><span class="nf">(neighbours) -&gt;</span>
</span><span class='line'>    <span class="nv">sum = </span><span class="k">new</span> <span class="nx">Vector</span>
</span><span class='line'>    <span class="nv">count = </span><span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">boid</span> <span class="k">in</span> <span class="nx">neighbours</span>
</span><span class='line'>      <span class="nv">d = </span><span class="nx">@location</span><span class="p">.</span><span class="nx">distance</span><span class="p">(</span><span class="nx">boid</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">d</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">and</span> <span class="nx">d</span> <span class="o">&lt;</span> <span class="nx">NEIGHBOUR_RADIUS</span>
</span><span class='line'>        <span class="nx">sum</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">boid</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">count</span><span class="o">++</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">steer_to</span> <span class="nx">sum</span><span class="p">.</span><span class="nx">divide</span><span class="p">(</span><span class="nx">count</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">sum</span> <span class="c1"># Empty vector contributes nothing</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">steer_to: </span><span class="nf">(target) -&gt;</span>
</span><span class='line'>    <span class="c1"># A vector pointing from the location to the target</span>
</span><span class='line'>    <span class="nv">desired = </span><span class="nx">Vector</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">@location</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Distance from the target is the magnitude of the vector</span>
</span><span class='line'>    <span class="nv">d = </span><span class="nx">desired</span><span class="p">.</span><span class="nx">magnitude</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># If the distance is greater than 0, calc steering</span>
</span><span class='line'>    <span class="c1"># (otherwise return zero vector)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">d</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nx">desired</span><span class="p">.</span><span class="nx">normalize</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Two options for desired vector magnitude</span>
</span><span class='line'>      <span class="c1"># (1 -- based on distance, 2 -- maxspeed)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">d</span> <span class="o">&lt;</span> <span class="mf">100.0</span>
</span><span class='line'>        <span class="c1"># This damping is arbitrary</span>
</span><span class='line'>        <span class="nx">desired</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">MAX_SPEED</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">/</span><span class="mf">100.0</span><span class="p">))</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">desired</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">MAX_SPEED</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Steering = Desired minus Velocity</span>
</span><span class='line'>      <span class="nv">steer = </span><span class="nx">desired</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="nx">@velocity</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># Limit to maximum steering force</span>
</span><span class='line'>      <span class="nx">steer</span><span class="p">.</span><span class="nx">limit</span><span class="p">(</span><span class="nx">MAX_FORCE</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nv">steer = </span><span class="k">new</span> <span class="nx">Vector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">steer</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Alignment</h3>

<div class="flock" id="alignmentDemo"></div>


<p>Each boid in a flock tries to head in the same direction as the rest of the flock, which is the responsibility of the <em>alignment</em> portion of the algorithm. Each frame, each boid looks at the heading in which it is travelling in comparison to the headings of all its neighbours, and realigns itself to match their heading. The velocity vectors of each boid within the <code>NEIGHBOUR_RADIUS</code> are averaged and the resulting vector points in the average direction of the flock, which the boid then tried to head in.</p>

<p>In the example on the left, the neighbouring boids are highlighted in green, and their velocities are shown in light green. Each of those velocities is averaged to find the average heading the pink boid should head in. This new heading is shown as the bright green vector coming from the pink boid. You can also see the pink boid&rsquo;s velocity as the black vector, and notice how if the angle between the current velocity in black and the average alignment of the neighbours in bright green is large, it gradually decreases as the boid adopts the new heading.</p>

<h4>Code</h4>

<p>The alignment is calculated by averaging the velocities of the neighbours within the <code>NEIGHBOUR_RADIUS</code>. The return value is also <code>limited</code> to exert no more than the maximum force. This is so that the alignment component can&rsquo;t overpower the others, which can happen if there is a big difference between the current boid and its neighbours' velocities.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Boid</span>
</span><span class='line'>  <span class="c1"># Alignment component for the frame&#39;s acceleration</span>
</span><span class='line'>  <span class="nv">align: </span><span class="nf">(neighbours) -&gt;</span>
</span><span class='line'>    <span class="nv">mean = </span><span class="k">new</span> <span class="nx">Vector</span>
</span><span class='line'>    <span class="nv">count = </span><span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">boid</span> <span class="k">in</span> <span class="nx">neighbours</span>
</span><span class='line'>      <span class="nv">d = </span><span class="nx">@location</span><span class="p">.</span><span class="nx">distance</span><span class="p">(</span><span class="nx">boid</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">d</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">and</span> <span class="nx">d</span> <span class="o">&lt;</span> <span class="nx">NEIGHBOUR_RADIUS</span>
</span><span class='line'>        <span class="nx">mean</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">boid</span><span class="p">.</span><span class="nx">velocity</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">count</span><span class="o">++</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">mean</span><span class="p">.</span><span class="nx">divide</span><span class="p">(</span><span class="nx">count</span><span class="p">)</span> <span class="k">if</span> <span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">mean</span><span class="p">.</span><span class="nx">limit</span><span class="p">(</span><span class="nx">MAX_FORCE</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">mean</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Separation</h3>

<div class="flock" id="separationDemo"></div>


<p>While in a flock, each boid tries not to run into each other one in the flock. They try to remain <em>separate</em> by keeping a specified amount of space in between themselves. Each boid checks all the other boids on the map to see if the distance between them is too small, and if so, adds an inversely proportional amount to its velocity in the opposite direction.</p>

<p>In the example on the right you can see the red circle which indicates the desired separation around the pink boid. If a boid enters this radius, the pink boid tries to navigate away. Boids which violate the pink boid&rsquo;s desired separation are also highlighted in red. The red arrow pointing out of the pink boid is the separation component of the algorithm, pointing away from any boids that are too close. Note that right at the start, all the boids are too close to the pink one, so they are all highlighted in red.</p>

<h4>Code</h4>

<p>The code loops through the neighbours as the other methods do while checking each neighbour to see if the distance to it is less than the <code>DESIRED_SEPARATION</code>. If it is, the vector going between the two boids is found such that it is pointing away from the uncomfortably close boid. This vector is normalized, and then scaled up proportionally to how close the boid is. If the foreign boid is closer, the vector is larger, and the current boid will move away faster.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Boid</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Separation component for the frame&#39;s acceleration</span>
</span><span class='line'>  <span class="nv">separate: </span><span class="nf">(neighbours) -&gt;</span>
</span><span class='line'>    <span class="nv">mean = </span><span class="k">new</span> <span class="nx">Vector</span>
</span><span class='line'>    <span class="nv">count = </span><span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">boid</span> <span class="k">in</span> <span class="nx">neighbours</span>
</span><span class='line'>      <span class="nv">d = </span><span class="nx">@location</span><span class="p">.</span><span class="nx">distance</span><span class="p">(</span><span class="nx">boid</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">d</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">and</span> <span class="nx">d</span> <span class="o">&lt;</span> <span class="nx">DESIRED_SEPARATION</span>
</span><span class='line'>        <span class="c1"># Normalized, weighted by distance vector pointing away from the neighbour</span>
</span><span class='line'>        <span class="nx">mean</span><span class="p">.</span><span class="nx">add</span> <span class="nx">Vector</span><span class="p">.</span><span class="nx">subtract</span><span class="p">(</span><span class="nx">@location</span><span class="p">,</span><span class="nx">boid</span><span class="p">.</span><span class="nx">location</span><span class="p">).</span><span class="nx">normalize</span><span class="p">().</span><span class="nx">divide</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">count</span><span class="o">++</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">mean</span><span class="p">.</span><span class="nx">divide</span><span class="p">(</span><span class="nx">count</span><span class="p">)</span> <span class="k">if</span> <span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">mean</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bringing it all together</h2>

<p>Once the component accelerations have been calculated, the weighted sum can be taken, and the final acceleration can be applied to the boid&rsquo;s velocity, as is shown at the beginning of the post. A small script like the one below is needed to manage each boid and <code>step</code> each one in sequence. To render this whole thing, I used <a href="http://processingjs.org/">Processing.js</a>, which was an absolute joy. The code (which has nothing to do with the flocking algorithm) to render the boid is below. For more on the Processing part of this page, I encourage you to check out the source for this page on <a href="https://github.com/hornairs/blog/blob/master/assets/coffeescripts/flocking/flock.coffee">Github</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Boid</span>
</span><span class='line'>  <span class="nv">r: </span><span class="mi">2</span> <span class="c1"># &quot;radius&quot; of the triangle</span>
</span><span class='line'>  <span class="nv">render: </span><span class="p">()</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1"># Draw a triangle rotated in the direction of velocity</span>
</span><span class='line'>    <span class="nv">theta = </span><span class="nx">@velocity</span><span class="p">.</span><span class="nx">heading</span><span class="p">()</span> <span class="o">+</span> <span class="nx">@p</span><span class="p">.</span><span class="nx">radians</span><span class="p">(</span><span class="mi">90</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">fill</span><span class="p">(</span><span class="mi">70</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">stroke</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">pushMatrix</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">@location</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">@location</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="nx">theta</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">beginShape</span><span class="p">(</span><span class="nx">@p</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">vertex</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">@r</span> <span class="o">*</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">vertex</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">@r</span><span class="p">,</span> <span class="nx">@r</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">vertex</span><span class="p">(</span><span class="nx">@r</span><span class="p">,</span> <span class="nx">@r</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">endShape</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@p</span><span class="p">.</span><span class="nx">popMatrix</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># flock function, passed the Processing instance by Processing itself</span>
</span><span class='line'><span class="nv">flock = </span><span class="nf">(processing) -&gt;</span>
</span><span class='line'>  <span class="nv">start = </span><span class="k">new</span> <span class="nx">Vector</span><span class="p">(</span><span class="nx">processing</span><span class="p">.</span><span class="nx">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">processing</span><span class="p">.</span><span class="nx">height</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Instantiate 100 boids who start in the middle of the map, have a maxmimum</span>
</span><span class='line'>  <span class="c1"># speed of 2, maximum force of 0.05, and give them a reference to the</span>
</span><span class='line'>  <span class="c1"># processing instance so they can render themselves.</span>
</span><span class='line'>  <span class="nv">boids = </span><span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">100</span><span class="p">]</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">Boid</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="nx">processing</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">processing.draw = </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">processing</span><span class="p">.</span><span class="nx">background</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">boid</span> <span class="k">in</span> <span class="nx">boids</span>
</span><span class='line'>      <span class="nx">boid</span><span class="p">.</span><span class="nx">step</span><span class="p">(</span><span class="nx">boids</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">boid</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
</span><span class='line'>    <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="nv">canvas = </span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;&lt;canvas width=&quot;550&quot; height=&quot;550&quot;&gt;&lt;/canvas&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;#flockingDemo&#39;</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="nv">processingInstance = </span><span class="k">new</span> <span class="nx">Processing</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="nx">flock</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! You can now stir up your own flocks of tiny little dudes to watch and herd about.</p>

<h2>Wrap Up</h2>

<p>I hope you found this informative! If you have any questions, comments, corrections, or know of any neat uses of flocking algorithms in the wild (baha!), please leave them below. Also, thanks again to Craig Reynolds for publishing his code in the first place and Daniel Shiffman for creating a basic Processing version of it.</p>

<h3>Thanks</h3>

<p>Thanks to Craig Reynolds for coming up with the algorithm and Daniel Shiffman for the initial port to Processing. Daniel is working on a new, free book called &ldquo;The Nature of Code&rdquo;, exploring what properties of nature we can find and use while coding. He&rsquo;s publishing the draft chapters for anyone who helps fund the project on Kickstarter, so if you like this kind of thing you could help contribute to it on <a href="https://www.kickstarter.com/projects/shiffman/the-nature-of-code-book-project">Kickstarter</a>.</p>

<p>Also, thanks to <a href="http://fustat.org/">Mo</a> for helping edit.</p>

<script src="http://harry.me/assets/flocking/flocking-f0fe0199b1533c6996fe876bb1982469.js"></script>


<p><link rel="stylesheet" href="http://harry.me/assets/flocking-e3ea43befd4dabf41388802712fd8632.css"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Today, Web Development Sucks]]></title>
    <link href="http://harry.me/blog/2011/01/27/today-web-development-sucks/"/>
    <updated>2011-01-27T12:41:00-05:00</updated>
    <id>http://harry.me/blog/2011/01/27/today-web-development-sucks</id>
    <content type="html"><![CDATA[<p>It seems clear to me that today, web development sucks.</p>

<p>It&rsquo;s hairy, scary, maybe even downright abominable. Here I&rsquo;ll try and explain why I think our current tool chains are inadequate, and where I think we should be going to fix it.</p>

<p>The core of the problem revolves around the most exciting domain in web application development today: Javascript. The explosion of Javascript has given rise to amazing applications of stellar quality for quite some time now, but I see them coming only from teams with gobs of time and expertise.</p>

<!--more-->


<h2>A quick recap</h2>

<p>Ruby developers write all their business logic and database interaction in Rails or Sinatra or on their own and feel right at home. They can use all the wonderful facilities local to Ruby, just like the Pythonistas or PHP or Scala writers can with their language of choice, and everyone ends up with an application stack that does the job. These apps can spit out great looking HTML, accept nothing but exactly valid data from users, present it back to the them in the most effective and beautiful way possible, all while keeping memory consumption at 10% and CPU usage negligible. We&rsquo;ve come so far since the days of cobbling together strings in PHP with inline database calls. Using these abstractions and frameworks has made us faster and our products better and allows us to leverage the collective intelligence of the open source world.</p>

<p>Then, the team or client or whoever decides that well, that fragment could be loaded using AJAX, or, hey, maybe we could add some animations to this drop down menu, or, hot damn, we should start validating stuff client side too!</p>

<p>This decision ushers in a new era of code duplication and implementation inconsistency. Services must be adapted to spit out JSON data for interpretation and rendering client side, or have their view code refactored to be accesible by fragment for use in AJAX calls. Developers end up reimplementing things like the server-side validations in Javascript in both their and the users interest, but code duplication severely limits maintainability, introduces a whole new class of possible errors, and requires proficiency in all languages involved, and is therefore most undesirable. All this is possible and done often, but lots of work.</p>

<h2>Javascript Heavy Applications</h2>

<p>The situation becomes hellish when you move to the SPA (<a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Application</a>) domain. Designing and developing a  <a href="http://www.sproutcore.com/">Sproutcore</a> app from scratch is way, way more work than the mediocre static HTML Rails or CakePHP or Pylons version providing similar functionality. With Sproutcore and company you write fat models on the client side with all sorts of domain logic and requirements-fulfilling-goodness, but then you go to save them to the server, and you start pulling your hair out. Like any sane developer, you must revalidate everything server side, requiring you to rewrite identical validations and apply them again. The dumb database-esque backend promised to you by the SPA ideals (see <a href="http://getcloudkit.com/">Cloudkit</a>) can&rsquo;t actually be dumb or malicious users would have a field day. Before said data ever gets to the server as it would in a traditional form POST, you have to design and twice implement a transport strategy to marshal and load your data over the wire. With Javascript SPAs, you must transport it, revalidate it, and then store it server side, whereas with traditional methods, you rely on the browser to do the transport, and at the last and safest moment do your validation only once.</p>

<p>These code repetition issues are compounded in the view layer, where applications must be able to render some data on both the server and dynamically in the client, providing graceful degradation and fast first page loads. Some people use a second set of templates in a second language on the client side to wire up their Javascript to create the same HTML the server would. Again, this is far from optimal because it is harder to maintain and gives rise to inconsistencies depending on where things are rendered. The Mustache solution, where the same template language has engines in a multitude of different server side and client side languages, come to mind, but Mustache isn&rsquo;t nearly there. With Mustache, you must define a class (on both sides, in each implementation) to manage the rendering of each individual view, which for me is still an unacceptable amount of duplication. The often used solution to the rendering issue is to do all or almost all rendering client side, which raises perceived response times for users and cripples caching&rsquo;s effects on user experience. UI Kits solve these issues and thus are becoming more and more prevalent, as evidenced by <a href="http://www.sproutcore.com/">Sproutcore</a>, <a href="http://cappuccino.org/">Cappucino</a>, <a href="http://ukijs.org/">Uki</a>, and <a href="http://qooxdoo.org/">Qooxdoo</a>&rsquo;s admirable efforts to bring standardized pure JS view hierarchies to the browser. These frameworks are extraordinary and supremely useful, but succumb to the validation issues mentioned above, are hard to optimize for search engines, and provide no or little ready-to-go backend interaction code.</p>

<p>Also of note are tertiary symptoms like Coffeescript. Its creation and ensuing explosion onto the scene speaks worlds of our current toolset&rsquo;s inadequacies: people can&rsquo;t stand writing code in the language they are forced to. As a community we&rsquo;ve started inventing cool new stuff on the serverside in an attempt to fix the clientside issues. We do as much as we can in the environment we control so we don&rsquo;t have issues in the environment we don&rsquo;t. Coffeescript, <a href="https://github.com/cowboyd/therubyracer">therubyracer</a>, <a href="https://github.com/bernerdschaefer/akephalos">Akephalos</a>, and <a href="http://www.infoq.com/interviews/node-ryan-dahl#question9">Yahoo&rsquo;s attempts at rendering YUI elements serverside</a> so they degrade all convince me of this.</p>

<h2>The issue and the current solutions</h2>

<p>The issue in my mind comes down to this: <em>apps are already too big to write twice</em>. Big entities can write abstractions that fix all this business, like Google&rsquo;s GWT, or they can man up and pour resources into creating or enhancing the existing frameworks, like Apple and Eloqua with Sproutcore. For punks like me, none of these options are viable, but applications need to be better than they are now. Instead, we use things like Backbone.js or Sammy.js or Faux, which provide some welcome and useful instrumentation but nothing on the scale I want. The Rails for Javascript apps has yet to arrive.</p>

<h2>Some Successful Examples</h2>

<ul>
<li><a href="http://www.eloqua.com/products/take-the-tour.html">Eloqua10</a></li>
</ul>


<p> The biggest Sproutcore app I could find outside of MobileMe. Eloqua has a couple devs who are also core Sproutcore devs, contributing a bunch back to the community and open sourcing a lot of their UI work. My issue is that it took all that work on the framework for them to get a product out of it. I don&rsquo;t have to make equivalently complex and intense applications, but I still want to be able to use the framework without having to be a core team member.</p>

<ul>
<li><a href="http://mail.google.com/">Gmail</a></li>
</ul>


<p> An astounding accomplishment on the web today. <em>Update: Gmail isn&rsquo;t built using GWT. Whoops.</em> Again, Google built the GWT so they didn&rsquo;t have to write code twice, but I don&rsquo;t want to be stuck in the Java world or be forced to learn the whole GWT and make any open source buddies of mine learn it too.</p>

<ul>
<li><a href="http://www.newsblur.com/">NewsBlur</a></li>
</ul>


<p> A RSS reader SPA application written by Samuel Clay of DocumentCloud fame. Well put together, but look at the <a href="https://github.com/samuelclay/NewsBlur/tree/master/media/js/">code</a>! To me it looks like it was a major pain to write. All the templating is done using <code>jQuery.make</code> and company. Its deceptively complicated and weighs in at 600KB of compressed JS.</p>

<ul>
<li><a href="http://www.quietwrite.com/">QuietWrite</a></li>
</ul>


<p> A pretty basic writing app built using <a href="http://documentcloud.github.com/backbone/">Backbone.js</a>. Successful because its so small and can be done using Backbone and jQuery in glorious tandem. A nice little app, but I would wager this same tech stack would not work for an app twice or four times the size. Backbone is an awesomely tiny library to start with, because it isn&rsquo;t meant to do everything, just provide some useful skeletoning. Building Eloqua10 using Backbone wouldn&rsquo;t work.</p>

<h2>What can be done about all of this?</h2>

<p>I believe Rails is so successful because it forced its conventions (good ones) upon people, and people learned that being told the right way to do something isn&rsquo;t so bad. I want something that applies to <em>both</em> the server side and client side in the same way. Both sides. If someone were to make an all Javascript Rails which covered the entire spectrum, I would use it. This super framework would have these attributes:</p>

<ul>
<li><p>Well defined and proper conventions requiring a minimum of configuration. Backbone.JS and Sproutcore both suffer from agnosticism syndrome, where they try and cater to the widest audience by not making any decisions about the backend for the developer. I am not as smart as the framework developer, so I would prefer they come up with the best solution they can for the data bottleneck that is the internet, and let me work with it within the same framework on both ends of the wire. If people want to spend time making their own transport layers, let them, but give me one to start with. This isn&rsquo;t so hard because the framework is the code on both ends and must only conform to itself.</p></li>
<li><p>Flawless and transparent code sharing between the client and the server that is so good I forget it even happens. If I wrote everything in the same environment, file structure, and using the same tooling, and on its own it figured out the bare minimum to send to the client and ran it there, I would bask in happiness for eternity. This is a monumentally difficult task as far as I can tell, but this is the killer feature. Write once, run on the continuum between the server and browser, and forget that theres actually a difference between the two. Validations can be shared and server dependent ones can be run there, views are written once and pushed to the browser as needed, and SEO works fine because the page can be rendered entirely server side. Other goodness that could emerge from this: fancy algorithms compressing data which goes across the wire, client side access to all the database&rsquo;s capabilities, insta-REST, and absolutely tiny asset packages for download.</p></li>
<li><p>A radical departure from the jQuery mindset of DOM querying and manipulation, and use a UI kit instead. We aren&rsquo;t in Kansas any more folks, its time to go where every other platform has gone and use the language to its fullest. The DOM should become an implementation detail which is touched as little as possible, and developers should work with virtual, extendable view classes as they do in Cocoa,QtGui, or Swing. If we want to build desktop class applications we need to adopt the similar and proven paradigms from the desktop world. Sproutcore, Cappucino, Uki, and Qooxdoo have realized this and applied these successfully.</p></li>
<li><p>An extensive UI Kit implementing all the stuff we are used to and then some. I mean building in handy stuff like sexy autocompletes or grids with searching and pagination. This stuff is traditionally found as plugins which in the jQuery world makes sense, because it&rsquo;s only needed on one page of one site out of a million developed with jQuery. This is no longer the case though! Desktop class applications all need these types of super rich widgets, as evidenced by their availability in things like the iOS SDK. It&rsquo;s ok if the framework is feature rich (some may read this as bloated) because it will be smart and only package what it needs to send to the browser, remember? Standardizing these components in the framework makes it easy to drop your data in and get desktop class functionality with rock solid reliability quickly.</p></li>
<li><p>A departure from the routing paradigm found in Rails, Sinatra, Sammy, and Backbone. The traditional one URL maps to one controller action routing table no longer applies. Think about applications like Wave, where the page is composed of many virtual windows, each somewhat independent and which all generate a multitude of state combinations. Theres no good way to express &lsquo;the inbox is minimized, the contact info for my friend Mo is open, and Wavelet ID #5 is open for editing&rsquo; in URL segments. We aren&rsquo;t dealing with paths in the same way we used to, the wavelet id isn&rsquo;t subordinate to the inbox&rsquo;s info or a member of the contact info folder, so why does it make sense to apply the directory having subordinate file members paradigm to this UI state? I&rsquo;m not sure what it should look like, but for complex UIs with several independent state possibilities, the old way doesn&rsquo;t cut it.</p></li>
<li><p>A gorgeous creative commons theme designed by Sofa. <em>In my dreams</em>.</p></li>
</ul>


<p>I see an opportunity for the next DHH to rise. I wish I were talented enough to accomplish such a feat, but alas, I tripped and fell trying to climb an escalator going in the wrong direction today, and thus convinced myself I am not the man for the job. Are you the man/woman who could do this? If so, please try! You&rsquo;d have at least one zealous developer, and I&rsquo;d tell all my friends about it.</p>

<p>Lets get away from maintaining two separate apps and back to thinking about the future folks.</p>
]]></content>
  </entry>
  
</feed>
