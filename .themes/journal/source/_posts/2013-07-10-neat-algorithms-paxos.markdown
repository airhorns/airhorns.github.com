---
layout: post
title: "Neat Algorithms - Paxos"
date: 2013-07-10 12:41
comments: true
featured_image: "/images/headers/paxos.jpg"
photo_credit: "<a href=\"http://analogromance.tumblr.com/\">Carter Brundage</a>"
categories: ['misc']
---

This is an article on and demonstration of an extraordinarily neat algorithm called Paxos. Paxos is a strategy for teaching a whole bunch of decidedly unreliable processes to reliably decide on stuff. More formally: it allows a group of potentially faulty processors to deterministically and safely reach consensus if Paxos' conditions are met while ensuring processors remain consistent if consensus can't be reached.

<div id="main_demo"></div>

# Paxos: something we can agree on.

Paxos is an algorithm to solve the consensus problem. Honest-to-goodness real-life implementations of Paxos can be found at the heart of world class software like Apache Zookeeper, Google's magnificent Spanner database, and also their distributed locking service Chubby.

The algorithm satisfies the following conditions:

 - Only values which are sent to the system can become a new, agreed upon value for the system (duh?)

This property albeit obvious is important: you don't want your system somehow reporting a value that was never set in the first place.

 - Values can only become the new value for the system if consensus can be reached

This is the "safety" property of the whole system: unless a majority of members of the system can agree that a potential value is actually the real value, the potential value won't ever become the real value.

Lets get some definitions out of the way so that if you explore the literature on the topic you can know what people are talking about:

 - `process`: one of the computers in the system. Also known as a replica.
 - `client`: a computer not in the system who is asking the system what the value is or to take on a new value.
 - `proposal`: the thing generated by a client asking the system to take on a new value. Note that proposals may succeed or fail.
 - `acceptance`: the act of one of the processes in the system deciding to take on a new value, or "accept" it as true.

# The guts

Let's examine what Paxos makes our cluster of processes do when a client asks that a new value be written:

 - A client of the Paxos governed system asks that a new value be set. The client here shows up as the pink circle, and the processes show up as the squares. Paxos makes a guarantee that the client can send their write request to any member of the Paxos cluster, so it picks one at random in this case.

<div id="client_demo"></div>

 - The Paxos process that recieves the write request "proposes" this new value to the system by sending a `prepare` message to all the other processes it knows of.

<div id="prepare_demo"></div>

This `prepare` message holds what's called a _sequence number_ inside it. The sequence number declares that the receiving process should prepare to accept a proposal with that sequence number. Each process which receives the `prepare` message can either reply with a `promise` message or nothing at all.

 - These receiving processes make the critical check in the system: that they've never seen a sequence number higher than the one held in the incoming `prepare` message. If they haven't, then they can be sure that this is the newest proposal, and promise that they'll accept it. If they have seen something higher, they know there is a newer proposal out on the loose, and can reply telling the out-of-date proposer that they are as such.

<div id="promise_demo"></div>

Paxos solves the problem of consensus over time by taking hold of time itself. Every time a process submits a value the system they associate with it a strictly increasing sequence number and associate the `prepare` (and as we'll see later, `accept`) messages with it. Using this number, a process in the system can identify in what order the messages it received were created, and apply temporal precedence.

 - The proposing process waits for the other processes to promise to accept only its proposal or a higher numbered one. Upon receiving promises from a majority of processes, the proposing process issues an `accept` message decreeing that they now store the proposed value associated with the sequence number in the proposal.

<div id="accept_demo"></div>

{% javascript paxos/paxos %}
{% stylesheet paxos %}
