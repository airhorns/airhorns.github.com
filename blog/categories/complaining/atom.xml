<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: complaining | Will You Harry Me]]></title>
  <link href="http://harry.me/blog/categories/complaining/atom.xml" rel="self"/>
  <link href="http://harry.me/"/>
  <updated>2015-09-28T17:23:14-04:00</updated>
  <id>http://harry.me/</id>
  <author>
    <name><![CDATA[Harry Brundage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Documentation Sucks]]></title>
    <link href="http://harry.me/blog/2012/01/22/javascript-documentation-sucks/"/>
    <updated>2012-01-22T12:41:00-05:00</updated>
    <id>http://harry.me/blog/2012/01/22/javascript-documentation-sucks</id>
    <content type="html"><![CDATA[<p>I want to use your JavaScript library. I really do.</p>

<p>Unfortunately, a lot of you are bad at documenting it, so I can't figure out how to use it before I give up and find something easier to learn.</p>

<!--more-->


<p>If you use <a href="http://jashkenas.github.com/docco/">docco</a>, this is because you write your documentation in the same way you write your code. Like a good team hacker you write your code with the principal design goal of making it easy for the next person working on the project, and only after satisfying that do you write for the other decidedly more mechanical audience. You strive to structure your code so that new functionality can be bolted on, or bits and bobs twiddled with to make the whole thing faster, and only serving the goal of getting the computer to do work in as elegant a manner as possible. This is awesome. Maintainable and readable code is awesome. In an effort to make it even more awesome, you start leaving some comments around. You say to yourself, well golly gee shucks, it would be nice if I had a reminder that this function's boolean argument indicates this or that; or maybe it would be nice to remember what all these <code>RegExp</code> back-references which I've rarely used before actually mean.</p>

<p>The problem is this: these comments are oriented at someone trying to understand the code, not just use it, so when you pull them out, they document how the code works, not how to use it. Someone looking to know how to use a function cares not that it calls out to something which takes a boolean parameter. Someone looking to instantiate a class to get work done cares not that some part of it uses a <code>RegExp</code> to accomplish its tasks. What someone does care about is the API that class or function exposes, and what work it does that is helpful. The whole point of abstracting something useful into a library is that I don't have to write that code myself when I use it, instead I can understand only the surface of it, and rely on you to have done a good job implementing the thing. I don't want to have to read through the whole piece of code to understand how to call into it. You've structured it for a developer looking to change it, not to use it, so I get lost, and your explanatory comments usually don't tell me function signatures or typical ways I might call them. It doesn't make sense to make someone who wants to consume your library have to traverse your one monolithic HTML page to find the one stupid function signature they are looking for.</p>

<p>So, for things that aren't quick and dirty, or aren't exhibitions, I don't like docco. If you want to generate awesome docs meant for consumption by people hacking on the project, by all means, use docco, Ã  la <a href="http://pow.cx/docs/">pow</a>. I really don't like people thinking docco or dox can be used for API documentation however. I believe this was never its intended purpose, but it <a href="https://github.com/echonest/nestjs">certainly</a> <a href="https://github.com/fd/chains.js/tree/50dce330d9f7f588643c016fec28cf1e6bdb34c6/docs">has</a> <a href="https://github.com/jgallen23/fidel">been</a> <a href="https://github.com/podviaznikov/fanfeedr">repurposed</a> <a href="https://github.com/waterfield/redeye">for</a> <a href="https://github.com/killdream/latte/tree/75ecff7a07b88d98aaed672ccc1408a753da88d7">this</a>. Perhaps developers feel that docco and company are suitable for creating API documentation because they, along with JSDoc, are the high visibility tools available in the JavaScript ecosystem. The misappropriation of docco isn't rampant but the problem is even more insidious than just this. There are some who go the opposite route and orient their comments for consumers using tools like JSDoc. I desire to have JavaScript libraries documented so I can use them, and the idea of a common tool like RDoc (and YARD) giving us something like <a href="http://rdoc.info">rdoc.info</a> would be amazing but for me, JSDoc is not the answer.</p>

<p>The problem again, is this: when you orient your comments at consumers, development becomes simultaneous development and documentation, which is just plain unpleasant. I think it's absolutely insane to have a 10 to 1 comment to code ratio in a file. It is outrageous to expect developers to work in files where each function has been meticulously explained, with all the available options listed and explained, as well as numerous examples of usage, all in a comment block just above the definition. Class bodies end up being enormous, and you can't fit a function body and the body of those called in the first body on the same screen. I find scrolling through the grey molasses terribly inefficient when trying to reason about or work on the code at hand. I cite the Rails source, or at least the portions of it which expose APIs aimed at developers, as an example of how challenging it is to navigate code with inline documentation. You just can't write clear, concise, readable code, at the same time as writing exhaustive, useful documentation when they co-exist in the same file.</p>

<p>You may say, Harry, these comments are wonderful, because we will change our comments when the code changes; they are right there, they will be in sync! I absolutely concede this: the closer the words for humans are to the words for the computer the easier a job we will have of keeping them accurate during change. Harry, you might say, now I can declare the types I expect my arguments to have and people can provide them. Harry, smart IDEs could even verify these types! I can almost pretend its a statically typed language! Again, you have a point, this information is valuable both to the library hacker and the library consumer, and maybe some IDEs I don't use are smart about the <code>@param</code> declarations. Harry, you say, use an editor where you can ignore comments or fold them. I say back at you: vim folds are hard, and I am lazy, and I'm not always in my own editor where I know how to fold.</p>

<p>To me, the clutter is simply not worth the advantages. We should design code such that the next man or woman coming along can edit it and succeed. We should not sacrifice their chances of success by making them work in and around the screen filling comment blocks. The code is the uniquely canonical specification for how it can be used. It implicitly declares all of its use cases, but it doesn't have to go ahead and be explicit about all those use cases by talking about them at length inline. It is essential that these examples and signatures and use cases are found somewhere, but I make the conscious decision to move my consumer documentation out of the code such that the code can be clear and unencumbered. Some project owners create gargantuan READMEs, or HTML guide style documentation, or GitHub wikis that these signatures and examples and whatnot look amazing inside. The shining examples from my world are the Django docs, the Rails Guides (and recently the SproutCore guides), and inside the JS world the Mongoose, Express, and Testling documentation sites. These are all curated sets of words for humans as well as code examples for humans showing how to consume a piece of software in another one. The problem comes down to actually creating these words, and continuing to maintain them after they've been released. APIs inevitably change, so docs inevitably go out of date. The worst aspect is that developers may not make changes because it is twice as much work as it might be normally. You must write the test, write the code, and now find all the places that code you changed is referenced in the docs and change them. There are of course notable exceptions, but in the JavaScript community I find myself learning how to use something from its README, and then spelunking in the code to find out the nuances.</p>

<p>This situation may not be as dire as I make it out to be, because if it were better tools would have evolved. It often seems to suffice in our community to ask people to read your tests or Google every second thing to figure out how to do it. Those amazing library authors who have the self control to document seem to either publish annotated source, write enormous comments, or pour their hearts into markdown'd READMEs and static sites. The annotated source isn't a good reference for consumers, JSDoc block comments impede development, and the README'd source can fall out of sync easily, as it has with my principle project, Batman.</p>

<p>So, I ask you, what is a JavaScript developer to do? How do I let people use my project, while developing unencumbered?</p>

<p>I would like to know, but I also have my own storm a'brewin. The solution is underway but can be found here: https://github.com/hornairs/percolate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Today, Web Development Sucks]]></title>
    <link href="http://harry.me/blog/2011/01/27/today-web-development-sucks/"/>
    <updated>2011-01-27T12:41:00-05:00</updated>
    <id>http://harry.me/blog/2011/01/27/today-web-development-sucks</id>
    <content type="html"><![CDATA[<p>It seems clear to me that today, web development sucks.</p>

<p>It's hairy, scary, maybe even downright abominable. Here I'll try and explain why I think our current tool chains are inadequate, and where I think we should be going to fix it.</p>

<p>The core of the problem revolves around the most exciting domain in web application development today: Javascript. The explosion of Javascript has given rise to amazing applications of stellar quality for quite some time now, but I see them coming only from teams with gobs of time and expertise.</p>

<!--more-->


<h2>A quick recap</h2>

<p>Ruby developers write all their business logic and database interaction in Rails or Sinatra or on their own and feel right at home. They can use all the wonderful facilities local to Ruby, just like the Pythonistas or PHP or Scala writers can with their language of choice, and everyone ends up with an application stack that does the job. These apps can spit out great looking HTML, accept nothing but exactly valid data from users, present it back to the them in the most effective and beautiful way possible, all while keeping memory consumption at 10% and CPU usage negligible. We've come so far since the days of cobbling together strings in PHP with inline database calls. Using these abstractions and frameworks has made us faster and our products better and allows us to leverage the collective intelligence of the open source world.</p>

<p>Then, the team or client or whoever decides that well, that fragment could be loaded using AJAX, or, hey, maybe we could add some animations to this drop down menu, or, hot damn, we should start validating stuff client side too!</p>

<p>This decision ushers in a new era of code duplication and implementation inconsistency. Services must be adapted to spit out JSON data for interpretation and rendering client side, or have their view code refactored to be accesible by fragment for use in AJAX calls. Developers end up reimplementing things like the server-side validations in Javascript in both their and the users interest, but code duplication severely limits maintainability, introduces a whole new class of possible errors, and requires proficiency in all languages involved, and is therefore most undesirable. All this is possible and done often, but lots of work.</p>

<h2>Javascript Heavy Applications</h2>

<p>The situation becomes hellish when you move to the SPA (<a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Application</a>) domain. Designing and developing a  <a href="http://www.sproutcore.com/">Sproutcore</a> app from scratch is way, way more work than the mediocre static HTML Rails or CakePHP or Pylons version providing similar functionality. With Sproutcore and company you write fat models on the client side with all sorts of domain logic and requirements-fulfilling-goodness, but then you go to save them to the server, and you start pulling your hair out. Like any sane developer, you must revalidate everything server side, requiring you to rewrite identical validations and apply them again. The dumb database-esque backend promised to you by the SPA ideals (see <a href="http://getcloudkit.com/">Cloudkit</a>) can't actually be dumb or malicious users would have a field day. Before said data ever gets to the server as it would in a traditional form POST, you have to design and twice implement a transport strategy to marshal and load your data over the wire. With Javascript SPAs, you must transport it, revalidate it, and then store it server side, whereas with traditional methods, you rely on the browser to do the transport, and at the last and safest moment do your validation only once.</p>

<p>These code repetition issues are compounded in the view layer, where applications must be able to render some data on both the server and dynamically in the client, providing graceful degradation and fast first page loads. Some people use a second set of templates in a second language on the client side to wire up their Javascript to create the same HTML the server would. Again, this is far from optimal because it is harder to maintain and gives rise to inconsistencies depending on where things are rendered. The Mustache solution, where the same template language has engines in a multitude of different server side and client side languages, come to mind, but Mustache isn't nearly there. With Mustache, you must define a class (on both sides, in each implementation) to manage the rendering of each individual view, which for me is still an unacceptable amount of duplication. The often used solution to the rendering issue is to do all or almost all rendering client side, which raises perceived response times for users and cripples caching's effects on user experience. UI Kits solve these issues and thus are becoming more and more prevalent, as evidenced by <a href="http://www.sproutcore.com/">Sproutcore</a>, <a href="http://cappuccino.org/">Cappucino</a>, <a href="http://ukijs.org/">Uki</a>, and <a href="http://qooxdoo.org/">Qooxdoo</a>'s admirable efforts to bring standardized pure JS view hierarchies to the browser. These frameworks are extraordinary and supremely useful, but succumb to the validation issues mentioned above, are hard to optimize for search engines, and provide no or little ready-to-go backend interaction code.</p>

<p>Also of note are tertiary symptoms like Coffeescript. Its creation and ensuing explosion onto the scene speaks worlds of our current toolset's inadequacies: people can't stand writing code in the language they are forced to. As a community we've started inventing cool new stuff on the serverside in an attempt to fix the clientside issues. We do as much as we can in the environment we control so we don't have issues in the environment we don't. Coffeescript, <a href="https://github.com/cowboyd/therubyracer">therubyracer</a>, <a href="https://github.com/bernerdschaefer/akephalos">Akephalos</a>, and <a href="http://www.infoq.com/interviews/node-ryan-dahl#question9">Yahoo's attempts at rendering YUI elements serverside</a> so they degrade all convince me of this.</p>

<h2>The issue and the current solutions</h2>

<p>The issue in my mind comes down to this: <em>apps are already too big to write twice</em>. Big entities can write abstractions that fix all this business, like Google's GWT, or they can man up and pour resources into creating or enhancing the existing frameworks, like Apple and Eloqua with Sproutcore. For punks like me, none of these options are viable, but applications need to be better than they are now. Instead, we use things like Backbone.js or Sammy.js or Faux, which provide some welcome and useful instrumentation but nothing on the scale I want. The Rails for Javascript apps has yet to arrive.</p>

<h2>Some Successful Examples</h2>

<ul>
<li><a href="http://www.eloqua.com/products/take-the-tour.html">Eloqua10</a></li>
</ul>


<p> The biggest Sproutcore app I could find outside of MobileMe. Eloqua has a couple devs who are also core Sproutcore devs, contributing a bunch back to the community and open sourcing a lot of their UI work. My issue is that it took all that work on the framework for them to get a product out of it. I don't have to make equivalently complex and intense applications, but I still want to be able to use the framework without having to be a core team member.</p>

<ul>
<li><a href="http://mail.google.com/">Gmail</a></li>
</ul>


<p> An astounding accomplishment on the web today. <em>Update: Gmail isn't built using GWT. Whoops.</em> Again, Google built the GWT so they didn't have to write code twice, but I don't want to be stuck in the Java world or be forced to learn the whole GWT and make any open source buddies of mine learn it too.</p>

<ul>
<li><a href="http://www.newsblur.com/">NewsBlur</a></li>
</ul>


<p> A RSS reader SPA application written by Samuel Clay of DocumentCloud fame. Well put together, but look at the <a href="https://github.com/samuelclay/NewsBlur/tree/master/media/js/">code</a>! To me it looks like it was a major pain to write. All the templating is done using <code>jQuery.make</code> and company. Its deceptively complicated and weighs in at 600KB of compressed JS.</p>

<ul>
<li><a href="http://www.quietwrite.com/">QuietWrite</a></li>
</ul>


<p> A pretty basic writing app built using <a href="http://documentcloud.github.com/backbone/">Backbone.js</a>. Successful because its so small and can be done using Backbone and jQuery in glorious tandem. A nice little app, but I would wager this same tech stack would not work for an app twice or four times the size. Backbone is an awesomely tiny library to start with, because it isn't meant to do everything, just provide some useful skeletoning. Building Eloqua10 using Backbone wouldn't work.</p>

<h2>What can be done about all of this?</h2>

<p>I believe Rails is so successful because it forced its conventions (good ones) upon people, and people learned that being told the right way to do something isn't so bad. I want something that applies to <em>both</em> the server side and client side in the same way. Both sides. If someone were to make an all Javascript Rails which covered the entire spectrum, I would use it. This super framework would have these attributes:</p>

<ul>
<li><p>Well defined and proper conventions requiring a minimum of configuration. Backbone.JS and Sproutcore both suffer from agnosticism syndrome, where they try and cater to the widest audience by not making any decisions about the backend for the developer. I am not as smart as the framework developer, so I would prefer they come up with the best solution they can for the data bottleneck that is the internet, and let me work with it within the same framework on both ends of the wire. If people want to spend time making their own transport layers, let them, but give me one to start with. This isn't so hard because the framework is the code on both ends and must only conform to itself.</p></li>
<li><p>Flawless and transparent code sharing between the client and the server that is so good I forget it even happens. If I wrote everything in the same environment, file structure, and using the same tooling, and on its own it figured out the bare minimum to send to the client and ran it there, I would bask in happiness for eternity. This is a monumentally difficult task as far as I can tell, but this is the killer feature. Write once, run on the continuum between the server and browser, and forget that theres actually a difference between the two. Validations can be shared and server dependent ones can be run there, views are written once and pushed to the browser as needed, and SEO works fine because the page can be rendered entirely server side. Other goodness that could emerge from this: fancy algorithms compressing data which goes across the wire, client side access to all the database's capabilities, insta-REST, and absolutely tiny asset packages for download.</p></li>
<li><p>A radical departure from the jQuery mindset of DOM querying and manipulation, and use a UI kit instead. We aren't in Kansas any more folks, its time to go where every other platform has gone and use the language to its fullest. The DOM should become an implementation detail which is touched as little as possible, and developers should work with virtual, extendable view classes as they do in Cocoa,QtGui, or Swing. If we want to build desktop class applications we need to adopt the similar and proven paradigms from the desktop world. Sproutcore, Cappucino, Uki, and Qooxdoo have realized this and applied these successfully.</p></li>
<li><p>An extensive UI Kit implementing all the stuff we are used to and then some. I mean building in handy stuff like sexy autocompletes or grids with searching and pagination. This stuff is traditionally found as plugins which in the jQuery world makes sense, because it's only needed on one page of one site out of a million developed with jQuery. This is no longer the case though! Desktop class applications all need these types of super rich widgets, as evidenced by their availability in things like the iOS SDK. It's ok if the framework is feature rich (some may read this as bloated) because it will be smart and only package what it needs to send to the browser, remember? Standardizing these components in the framework makes it easy to drop your data in and get desktop class functionality with rock solid reliability quickly.</p></li>
<li><p>A departure from the routing paradigm found in Rails, Sinatra, Sammy, and Backbone. The traditional one URL maps to one controller action routing table no longer applies. Think about applications like Wave, where the page is composed of many virtual windows, each somewhat independent and which all generate a multitude of state combinations. Theres no good way to express 'the inbox is minimized, the contact info for my friend Mo is open, and Wavelet ID #5 is open for editing' in URL segments. We aren't dealing with paths in the same way we used to, the wavelet id isn't subordinate to the inbox's info or a member of the contact info folder, so why does it make sense to apply the directory having subordinate file members paradigm to this UI state? I'm not sure what it should look like, but for complex UIs with several independent state possibilities, the old way doesn't cut it.</p></li>
<li><p>A gorgeous creative commons theme designed by Sofa. <em>In my dreams</em>.</p></li>
</ul>


<p>I see an opportunity for the next DHH to rise. I wish I were talented enough to accomplish such a feat, but alas, I tripped and fell trying to climb an escalator going in the wrong direction today, and thus convinced myself I am not the man for the job. Are you the man/woman who could do this? If so, please try! You'd have at least one zealous developer, and I'd tell all my friends about it.</p>

<p>Lets get away from maintaining two separate apps and back to thinking about the future folks.</p>
]]></content>
  </entry>
  
</feed>
